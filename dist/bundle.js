!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t){e.exports=class{constructor(e){"string"==typeof e&&(e=document.querySelector(e)),this.$el=e}exists(){return!!this.$el}get(){return this.$el}show(){return this.$el.style.display="block",this}showInline(){return this.$el.style.display="inline",this}hide(){return this.$el.style.display="none",this}disable(){return this.$el.disabled=!0,this}enable(){return this.$el.disabled=!1,this}style(e,t){return void 0===e?this.$el.style:void 0===t?this.$el.style[e]:(this.$el.style[e]=t,this)}attr(e,t){return void 0===t?this.$el.getAttribute(e):!1===t?(this.$el.removeAttribute(e),this):(this.$el.setAttribute(e,t),this)}addClass(e){return this.$el.className+=` ${e}`,this}removeClass(e){return this.$el.className=this.$el.className.replace(e,"").replace("  "," "),this}remove(){return this.$el.parentNode.removeChild(this.$el),this}setRandomBackground({path:e="",range:t=[0,5],length:n=3,ext:s="jpg"}){const[i,r]=t,o=Math.round(Math.random()*(r-i)+i),a=("0".repeat(n)+o).substr(-n);this.$el.style.backgroundImage=`url(${e}/${a}.${s})`}appear(){return this.style("opacity",1),this}disappear(){return this.style("opacity",0),this}focus(){return this.$el.focus(),this}html(e){return void 0===e?this.$el.innerHTML:(this.$el.innerHTML=e,this)}appendHtml(e){return this.$el.innerHTML+=e,this}prependHtml(e){return this.$el.innerHTML=e+this.html(),this}val(e){return void 0===e?this.$el.value:(this.$el.value=e,this)}clear(){return this.$el.value="",this}isVisible(){return""===this.$el.style.display||this.$el.style.display.match(/(block|inline|inline-block)/)}toggle(){return this.isVisible()?(this.hide(),this):(this.show(),this)}caretEnd(){if(this.$el.focus(),void 0!==window.getSelection&&void 0!==document.createRange){var e=document.createRange();e.selectNodeContents(this.$el),e.collapse(!1);var t=window.getSelection();t.removeAllRanges(),t.addRange(e)}else if(void 0!==document.body.createTextRange){var n=document.body.createTextRange();n.moveToElementText(this.$el),n.collapse(!1),n.select()}return this}src(e){return void 0===e?this.$el.src:(this.$el.src=e,this)}scrollBottom(){return this.$el.scrollTop=this.$el.scrollHeight,this}on(e,t){return this.$el.addEventListener(e,t),this}static injectStyles(e){const t=document.createElement("style");t.type="text/css",t.innerHTML=e,document.getElementsByTagName("head")[0].appendChild(t)}}},function(e,t,n){var s,i,r={},o=(s=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=s.apply(this,arguments)),i}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,c=0,u=[],d=n(27);function h(e,t){for(var n=0;n<e.length;n++){var s=e[n],i=r[s.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](s.parts[o]);for(;o<s.parts.length;o++)i.parts.push(E(s.parts[o],t))}else{var a=[];for(o=0;o<s.parts.length;o++)a.push(E(s.parts[o],t));r[s.id]={id:s.id,refs:1,parts:a}}}}function p(e,t){for(var n=[],s={},i=0;i<e.length;i++){var r=e[i],o=t.base?r[0]+t.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};s[o]?s[o].parts.push(a):n.push(s[o]={id:o,parts:[a]})}return n}function f(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var s=u[u.length-1];if("top"===e.insertAt)s?s.nextSibling?n.insertBefore(t,s.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function _(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");return e.attrs.type="text/css",v(t,e.attrs),f(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function E(e,t){var n,s,i,r;if(t.transform&&e.css){if(!(r=t.transform(e.css)))return function(){};e.css=r}if(t.singleton){var o=c++;n=l||(l=m(t)),s=g.bind(null,n,o,!1),i=g.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(t,e.attrs),f(e,t),t}(t),s=function(e,t,n){var s=n.css,i=n.sourceMap,r=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||r)&&(s=d(s));i&&(s+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([s],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,n,t),i=function(){_(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),s=function(e,t){var n=t.css,s=t.media;s&&e.setAttribute("media",s);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){_(n)});return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return h(n,t),function(e){for(var s=[],i=0;i<n.length;i++){var o=n[i];(a=r[o.id]).refs--,s.push(a)}e&&h(p(e,t),t);for(i=0;i<s.length;i++){var a;if(0===(a=s[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var y,C=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function g(e,t,n,s){var i=n?"":s.css;if(e.styleSheet)e.styleSheet.cssText=C(t,i);else{var r=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",s=e[3];if(!s)return n;if(t&&"function"==typeof btoa){var i=(o=s,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),r=s.sources.map(function(e){return"/*# sourceURL="+s.sourceRoot+e+" */"});return[n].concat(r).concat([i]).join("\n")}var o;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var s={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(s[r]=!0)}for(i=0;i<e.length;i++){var o=e[i];"number"==typeof o[0]&&s[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){var n;e.exports=function e(t,s,i){function r(a,l){if(!s[a]){if(!t[a]){var c="function"==typeof n&&n;if(!l&&c)return n(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var d=s[a]={exports:{}};t[a][0].call(d.exports,function(e){var n=t[a][1][e];return r(n||e)},d,d.exports,e,t,s,i)}return s[a].exports}for(var o="function"==typeof n&&n,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,n,s){(function(e){"use strict";var t,s,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var r=0,o=new i(u),a=e.document.createTextNode("");o.observe(a,{characterData:!0}),t=function(){a.data=r=++r%2}}else if(e.setImmediate||void 0===e.MessageChannel)t="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var l=new e.MessageChannel;l.port1.onmessage=u,t=function(){l.port2.postMessage(0)}}var c=[];function u(){var e,t;s=!0;for(var n=c.length;n;){for(t=c,c=[],e=-1;++e<n;)t[e]();n=c.length}s=!1}n.exports=function(e){1!==c.push(e)||s||t()}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var s=e(1);function i(){}var r={},o=["REJECTED"],a=["FULFILLED"],l=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&p(this,e)}function u(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function d(e,t,n){s(function(){var s;try{s=t(n)}catch(t){return r.reject(e,t)}s===e?r.reject(e,new TypeError("Cannot resolve promise with itself")):r.resolve(e,s)})}function h(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var n=!1;function s(t){n||(n=!0,r.reject(e,t))}function i(t){n||(n=!0,r.resolve(e,t))}var o=f(function(){t(i,s)});"error"===o.status&&s(o.value)}function f(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=c,c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===o)return this;var n=new this.constructor(i);if(this.state!==l){var s=this.state===a?e:t;d(n,s,this.outcome)}else this.queue.push(new u(n,e,t));return n},u.prototype.callFulfilled=function(e){r.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){d(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){r.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){d(this.promise,this.onRejected,e)},r.resolve=function(e,t){var n=f(h,t);if("error"===n.status)return r.reject(e,n.value);var s=n.value;if(s)p(e,s);else{e.state=a,e.outcome=t;for(var i=-1,o=e.queue.length;++i<o;)e.queue[i].callFulfilled(t)}return e},r.reject=function(e,t){e.state=o,e.outcome=t;for(var n=-1,s=e.queue.length;++n<s;)e.queue[n].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:r.resolve(new this(i),e)},c.reject=function(e){var t=new this(i);return r.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,s=!1;if(!n)return this.resolve([]);for(var o=new Array(n),a=0,l=-1,c=new this(i);++l<n;)u(e[l],l);return c;function u(e,i){t.resolve(e).then(function(e){o[i]=e,++a!==n||s||(s=!0,r.resolve(c,o))},function(e){s||(s=!0,r.reject(c,e))})}},c.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,s=!1;if(!n)return this.resolve([]);for(var o,a=-1,l=new this(i);++a<n;)o=e[a],t.resolve(o).then(function(e){s||(s=!0,r.resolve(l,e))},function(e){s||(s=!0,r.reject(l,e))});return l}},{1:1}],3:[function(e,n,s){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function r(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(r){if("TypeError"!==r.name)throw r;for(var n="undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder,s=new n,i=0;i<e.length;i+=1)s.append(e[i]);return s.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var o=Promise;function a(e,t){t&&e.then(function(e){t(null,e)},function(e){t(e)})}function l(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function c(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function u(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var d="local-forage-detect-blob-support",h=void 0,p={},f=Object.prototype.toString,_="readonly",m="readwrite";function v(e){return"boolean"==typeof h?o.resolve(h):function(e){return new o(function(t){var n=e.transaction(d,m),s=r([""]);n.objectStore(d).put(s,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}}).catch(function(){return!1})}(e).then(function(e){return h=e})}function E(e){var t=p[e.name],n={};n.promise=new o(function(e,t){n.resolve=e,n.reject=t}),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then(function(){return n.promise}):t.dbReady=n.promise}function y(e){var t=p[e.name],n=t.deferredOperations.pop();if(n)return n.resolve(),n.promise}function C(e,t){var n=p[e.name],s=n.deferredOperations.pop();if(s)return s.reject(t),s.promise}function g(e,t){return new o(function(n,s){if(p[e.name]=p[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);E(e),e.db.close()}var r=[e.name];t&&r.push(e.version);var o=i.open.apply(i,r);t&&(o.onupgradeneeded=function(t){var n=o.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(d)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),o.onerror=function(e){e.preventDefault(),s(o.error)},o.onsuccess=function(){n(o.result),y(e)}})}function b(e){return g(e,!1)}function I(e){return g(e,!0)}function T(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),s=e.version<e.db.version,i=e.version>e.db.version;if(s&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),i||n){if(n){var r=e.db.version+1;r>e.version&&(e.version=r)}return!0}return!1}function S(e){var t=function(e){for(var t=e.length,n=new ArrayBuffer(t),s=new Uint8Array(n),i=0;i<t;i++)s[i]=e.charCodeAt(i);return n}(atob(e.data));return r([t],{type:e.type})}function L(e){return e&&e.__local_forage_encoded_blob}function A(e){var t=this,n=t._initReady().then(function(){var e=p[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady});return l(n,e,e),n}function w(e,t,n,s){void 0===s&&(s=1);try{var i=e.db.transaction(e.storeName,t);n(null,i)}catch(i){if(s>0&&(!e.db||"InvalidStateError"===i.name||"NotFoundError"===i.name))return o.resolve().then(function(){if(!e.db||"NotFoundError"===i.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),I(e)}).then(function(){return function(e){E(e);for(var t=p[e.name],n=t.forages,s=0;s<n.length;s++){var i=n[s];i._dbInfo.db&&(i._dbInfo.db.close(),i._dbInfo.db=null)}return e.db=null,b(e).then(function(t){return e.db=t,T(e)?I(e):t}).then(function(s){e.db=t.db=s;for(var i=0;i<n.length;i++)n[i]._dbInfo.db=s}).catch(function(t){throw C(e,t),t})}(e).then(function(){w(e,t,n,s-1)})}).catch(n);n(i)}}var R={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var s in e)n[s]=e[s];var i=p[n.name];i||(i={forages:[],db:null,dbReady:null,deferredOperations:[]},p[n.name]=i),i.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=A);var r=[];function a(){return o.resolve()}for(var l=0;l<i.forages.length;l++){var c=i.forages[l];c!==t&&r.push(c._initReady().catch(a))}var u=i.forages.slice(0);return o.all(r).then(function(){return n.db=i.db,b(n)}).then(function(e){return n.db=e,T(n,t._defaultConfig.version)?I(n):e}).then(function(e){n.db=i.db=e,t._dbInfo=n;for(var s=0;s<u.length;s++){var r=u[s];r!==t&&(r._dbInfo.db=n.db,r._dbInfo.version=n.version)}})},_support:function(){try{if(!i)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,s=new o(function(t,s){n.ready().then(function(){w(n._dbInfo,_,function(i,r){if(i)return s(i);try{var o=r.objectStore(n._dbInfo.storeName),a=o.openCursor(),l=1;a.onsuccess=function(){var n=a.result;if(n){var s=n.value;L(s)&&(s=S(s));var i=e(s,n.key,l++);void 0!==i?t(i):n.continue()}else t()},a.onerror=function(){s(a.error)}}catch(e){s(e)}})}).catch(s)});return a(s,t),s},getItem:function(e,t){var n=this;e=c(e);var s=new o(function(t,s){n.ready().then(function(){w(n._dbInfo,_,function(i,r){if(i)return s(i);try{var o=r.objectStore(n._dbInfo.storeName),a=o.get(e);a.onsuccess=function(){var e=a.result;void 0===e&&(e=null),L(e)&&(e=S(e)),t(e)},a.onerror=function(){s(a.error)}}catch(e){s(e)}})}).catch(s)});return a(s,t),s},setItem:function(e,t,n){var s=this;e=c(e);var i=new o(function(n,i){var r;s.ready().then(function(){return r=s._dbInfo,"[object Blob]"===f.call(t)?v(r.db).then(function(e){return e?t:(n=t,new o(function(e,t){var s=new FileReader;s.onerror=t,s.onloadend=function(t){var s=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:s,type:n.type})},s.readAsBinaryString(n)}));var n}):t}).then(function(t){w(s._dbInfo,m,function(r,o){if(r)return i(r);try{var a=o.objectStore(s._dbInfo.storeName);null===t&&(t=void 0);var l=a.put(t,e);o.oncomplete=function(){void 0===t&&(t=null),n(t)},o.onabort=o.onerror=function(){var e=l.error?l.error:l.transaction.error;i(e)}}catch(e){i(e)}})}).catch(i)});return a(i,n),i},removeItem:function(e,t){var n=this;e=c(e);var s=new o(function(t,s){n.ready().then(function(){w(n._dbInfo,m,function(i,r){if(i)return s(i);try{var o=r.objectStore(n._dbInfo.storeName),a=o.delete(e);r.oncomplete=function(){t()},r.onerror=function(){s(a.error)},r.onabort=function(){var e=a.error?a.error:a.transaction.error;s(e)}}catch(e){s(e)}})}).catch(s)});return a(s,t),s},clear:function(e){var t=this,n=new o(function(e,n){t.ready().then(function(){w(t._dbInfo,m,function(s,i){if(s)return n(s);try{var r=i.objectStore(t._dbInfo.storeName),o=r.clear();i.oncomplete=function(){e()},i.onabort=i.onerror=function(){var e=o.error?o.error:o.transaction.error;n(e)}}catch(e){n(e)}})}).catch(n)});return a(n,e),n},length:function(e){var t=this,n=new o(function(e,n){t.ready().then(function(){w(t._dbInfo,_,function(s,i){if(s)return n(s);try{var r=i.objectStore(t._dbInfo.storeName),o=r.count();o.onsuccess=function(){e(o.result)},o.onerror=function(){n(o.error)}}catch(e){n(e)}})}).catch(n)});return a(n,e),n},key:function(e,t){var n=this,s=new o(function(t,s){e<0?t(null):n.ready().then(function(){w(n._dbInfo,_,function(i,r){if(i)return s(i);try{var o=r.objectStore(n._dbInfo.storeName),a=!1,l=o.openCursor();l.onsuccess=function(){var n=l.result;n?0===e?t(n.key):a?t(n.key):(a=!0,n.advance(e)):t(null)},l.onerror=function(){s(l.error)}}catch(e){s(e)}})}).catch(s)});return a(s,t),s},keys:function(e){var t=this,n=new o(function(e,n){t.ready().then(function(){w(t._dbInfo,_,function(s,i){if(s)return n(s);try{var r=i.objectStore(t._dbInfo.storeName),o=r.openCursor(),a=[];o.onsuccess=function(){var t=o.result;t?(a.push(t.key),t.continue()):e(a)},o.onerror=function(){n(o.error)}}catch(e){n(e)}})}).catch(n)});return a(n,e),n},dropInstance:function(e,t){t=u.apply(this,arguments);var n,s=this.config();if((e="function"!=typeof e&&e||{}).name||(e.name=e.name||s.name,e.storeName=e.storeName||s.storeName),e.name){var r=e.name===s.name&&this._dbInfo.db,l=r?o.resolve(this._dbInfo.db):b(e).then(function(t){var n=p[e.name],s=n.forages;n.db=t;for(var i=0;i<s.length;i++)s[i]._dbInfo.db=t;return t});n=e.storeName?l.then(function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;E(e);var s=p[e.name],r=s.forages;t.close();for(var a=0;a<r.length;a++){var l=r[a];l._dbInfo.db=null,l._dbInfo.version=n}var c=new o(function(t,s){var r=i.open(e.name,n);r.onerror=function(e){var t=r.result;t.close(),s(e)},r.onupgradeneeded=function(){var t=r.result;t.deleteObjectStore(e.storeName)},r.onsuccess=function(){var e=r.result;e.close(),t(e)}});return c.then(function(e){s.db=e;for(var t=0;t<r.length;t++){var n=r[t];n._dbInfo.db=e,y(n._dbInfo)}}).catch(function(t){throw(C(e,t)||o.resolve()).catch(function(){}),t})}}):l.then(function(t){E(e);var n=p[e.name],s=n.forages;t.close();for(var r=0;r<s.length;r++){var a=s[r];a._dbInfo.db=null}var l=new o(function(t,n){var s=i.deleteDatabase(e.name);s.onerror=s.onblocked=function(e){var t=s.result;t&&t.close(),n(e)},s.onsuccess=function(){var e=s.result;e&&e.close(),t(e)}});return l.then(function(e){n.db=e;for(var t=0;t<s.length;t++){var i=s[t];y(i._dbInfo)}}).catch(function(t){throw(C(e,t)||o.resolve()).catch(function(){}),t})})}else n=o.reject("Invalid arguments");return a(n,t),n}},N="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",D="~~local_forage_type~",O=/^~~local_forage_type~([^~]+)~/,P="__lfsc__:",x=P.length,k="arbf",M="blob",B="si08",F="ui08",H="uic8",U="si16",j="si32",G="ur16",q="ui32",W="fl32",V="fl64",$=x+k.length,K=Object.prototype.toString;function z(e){var t,n,s,i,r,o=.75*e.length,a=e.length,l=0;"="===e[e.length-1]&&(o--,"="===e[e.length-2]&&o--);var c=new ArrayBuffer(o),u=new Uint8Array(c);for(t=0;t<a;t+=4)n=N.indexOf(e[t]),s=N.indexOf(e[t+1]),i=N.indexOf(e[t+2]),r=N.indexOf(e[t+3]),u[l++]=n<<2|s>>4,u[l++]=(15&s)<<4|i>>2,u[l++]=(3&i)<<6|63&r;return c}function Y(e){var t,n=new Uint8Array(e),s="";for(t=0;t<n.length;t+=3)s+=N[n[t]>>2],s+=N[(3&n[t])<<4|n[t+1]>>4],s+=N[(15&n[t+1])<<2|n[t+2]>>6],s+=N[63&n[t+2]];return n.length%3==2?s=s.substring(0,s.length-1)+"=":n.length%3==1&&(s=s.substring(0,s.length-2)+"=="),s}var X={serialize:function(e,t){var n="";if(e&&(n=K.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===K.call(e.buffer))){var s,i=P;e instanceof ArrayBuffer?(s=e,i+=k):(s=e.buffer,"[object Int8Array]"===n?i+=B:"[object Uint8Array]"===n?i+=F:"[object Uint8ClampedArray]"===n?i+=H:"[object Int16Array]"===n?i+=U:"[object Uint16Array]"===n?i+=G:"[object Int32Array]"===n?i+=j:"[object Uint32Array]"===n?i+=q:"[object Float32Array]"===n?i+=W:"[object Float64Array]"===n?i+=V:t(new Error("Failed to get type for BinaryArray"))),t(i+Y(s))}else if("[object Blob]"===n){var r=new FileReader;r.onload=function(){var n=D+e.type+"~"+Y(this.result);t(P+M+n)},r.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,x)!==P)return JSON.parse(e);var t,n=e.substring($),s=e.substring(x,$);if(s===M&&O.test(n)){var i=n.match(O);t=i[1],n=n.substring(i[0].length)}var o=z(n);switch(s){case k:return o;case M:return r([o],{type:t});case B:return new Int8Array(o);case F:return new Uint8Array(o);case H:return new Uint8ClampedArray(o);case U:return new Int16Array(o);case G:return new Uint16Array(o);case j:return new Int32Array(o);case q:return new Uint32Array(o);case W:return new Float32Array(o);case V:return new Float64Array(o);default:throw new Error("Unkown type: "+s)}},stringToBuffer:z,bufferToString:Y};function J(e,t,n,s){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,s)}function Q(e,t,n,s,i,r){e.executeSql(n,s,i,function(e,o){o.code===o.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[name],function(e,a){a.rows.length?r(e,o):J(e,t,function(){e.executeSql(n,s,i,r)},r)},r):r(e,o)},r)}var Z={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var s in e)n[s]="string"!=typeof e[s]?e[s].toString():e[s];var i=new o(function(e,s){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return s(e)}n.db.transaction(function(i){J(i,n,function(){t._dbInfo=n,e()},function(e,t){s(t)})},s)});return n.serializer=X,i},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,s=new o(function(t,s){n.ready().then(function(){var i=n._dbInfo;i.db.transaction(function(n){Q(n,i,"SELECT * FROM "+i.storeName,[],function(n,s){for(var r=s.rows,o=r.length,a=0;a<o;a++){var l=r.item(a),c=l.value;if(c&&(c=i.serializer.deserialize(c)),void 0!==(c=e(c,l.key,a+1)))return void t(c)}t()},function(e,t){s(t)})})}).catch(s)});return a(s,t),s},getItem:function(e,t){var n=this;e=c(e);var s=new o(function(t,s){n.ready().then(function(){var i=n._dbInfo;i.db.transaction(function(n){Q(n,i,"SELECT * FROM "+i.storeName+" WHERE key = ? LIMIT 1",[e],function(e,n){var s=n.rows.length?n.rows.item(0).value:null;s&&(s=i.serializer.deserialize(s)),t(s)},function(e,t){s(t)})})}).catch(s)});return a(s,t),s},setItem:function(e,t,n){return function e(t,n,s,i){var r=this;t=c(t);var l=new o(function(o,a){r.ready().then(function(){void 0===n&&(n=null);var l=n,c=r._dbInfo;c.serializer.serialize(n,function(n,u){u?a(u):c.db.transaction(function(e){Q(e,c,"INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[t,n],function(){o(l)},function(e,t){a(t)})},function(n){if(n.code===n.QUOTA_ERR){if(i>0)return void o(e.apply(r,[t,l,s,i-1]));a(n)}})})}).catch(a)});return a(l,s),l}.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=c(e);var s=new o(function(t,s){n.ready().then(function(){var i=n._dbInfo;i.db.transaction(function(n){Q(n,i,"DELETE FROM "+i.storeName+" WHERE key = ?",[e],function(){t()},function(e,t){s(t)})})}).catch(s)});return a(s,t),s},clear:function(e){var t=this,n=new o(function(e,n){t.ready().then(function(){var s=t._dbInfo;s.db.transaction(function(t){Q(t,s,"DELETE FROM "+s.storeName,[],function(){e()},function(e,t){n(t)})})}).catch(n)});return a(n,e),n},length:function(e){var t=this,n=new o(function(e,n){t.ready().then(function(){var s=t._dbInfo;s.db.transaction(function(t){Q(t,s,"SELECT COUNT(key) as c FROM "+s.storeName,[],function(t,n){var s=n.rows.item(0).c;e(s)},function(e,t){n(t)})})}).catch(n)});return a(n,e),n},key:function(e,t){var n=this,s=new o(function(t,s){n.ready().then(function(){var i=n._dbInfo;i.db.transaction(function(n){Q(n,i,"SELECT key FROM "+i.storeName+" WHERE id = ? LIMIT 1",[e+1],function(e,n){var s=n.rows.length?n.rows.item(0).key:null;t(s)},function(e,t){s(t)})})}).catch(s)});return a(s,t),s},keys:function(e){var t=this,n=new o(function(e,n){t.ready().then(function(){var s=t._dbInfo;s.db.transaction(function(t){Q(t,s,"SELECT key FROM "+s.storeName,[],function(t,n){for(var s=[],i=0;i<n.rows.length;i++)s.push(n.rows.item(i).key);e(s)},function(e,t){n(t)})})}).catch(n)});return a(n,e),n},dropInstance:function(e,t){t=u.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var s,i=this;return a(s=e.name?new o(function(t){var s;s=e.name===n.name?i._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:s,storeNames:[e.storeName]}):t(function(e){return new o(function(t,n){e.transaction(function(s){s.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(n,s){for(var i=[],r=0;r<s.rows.length;r++)i.push(s.rows.item(r).name);t({db:e,storeNames:i})},function(e,t){n(t)})},function(e){n(e)})})}(s))}).then(function(e){return new o(function(t,n){e.db.transaction(function(s){function i(e){return new o(function(t,n){s.executeSql("DROP TABLE IF EXISTS "+e,[],function(){t()},function(e,t){n(t)})})}for(var r=[],a=0,l=e.storeNames.length;a<l;a++)r.push(i(e.storeNames[a]));o.all(r).then(function(){t()}).catch(function(e){n(e)})},function(e){n(e)})})}):o.reject("Invalid arguments"),t),s}};function ee(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function te(){return!function(){try{return localStorage.setItem("_localforage_support_test",!0),localStorage.removeItem("_localforage_support_test"),!1}catch(e){return!0}}()||localStorage.length>0}var ne={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=ee(e,this._defaultConfig),te()?(this._dbInfo=t,t.serializer=X,o.resolve()):o.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,s=n.ready().then(function(){for(var t=n._dbInfo,s=t.keyPrefix,i=s.length,r=localStorage.length,o=1,a=0;a<r;a++){var l=localStorage.key(a);if(0===l.indexOf(s)){var c=localStorage.getItem(l);if(c&&(c=t.serializer.deserialize(c)),void 0!==(c=e(c,l.substring(i),o++)))return c}}});return a(s,t),s},getItem:function(e,t){var n=this;e=c(e);var s=n.ready().then(function(){var t=n._dbInfo,s=localStorage.getItem(t.keyPrefix+e);return s&&(s=t.serializer.deserialize(s)),s});return a(s,t),s},setItem:function(e,t,n){var s=this;e=c(e);var i=s.ready().then(function(){void 0===t&&(t=null);var n=t;return new o(function(i,r){var o=s._dbInfo;o.serializer.serialize(t,function(t,s){if(s)r(s);else try{localStorage.setItem(o.keyPrefix+e,t),i(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||r(e),r(e)}})})});return a(i,n),i},removeItem:function(e,t){var n=this;e=c(e);var s=n.ready().then(function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)});return a(s,t),s},clear:function(e){var t=this,n=t.ready().then(function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var s=localStorage.key(n);0===s.indexOf(e)&&localStorage.removeItem(s)}});return a(n,e),n},length:function(e){var t=this.keys().then(function(e){return e.length});return a(t,e),t},key:function(e,t){var n=this,s=n.ready().then(function(){var t,s=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(s.keyPrefix.length)),t});return a(s,t),s},keys:function(e){var t=this,n=t.ready().then(function(){for(var e=t._dbInfo,n=localStorage.length,s=[],i=0;i<n;i++){var r=localStorage.key(i);0===r.indexOf(e.keyPrefix)&&s.push(r.substring(e.keyPrefix.length))}return s});return a(n,e),n},dropInstance:function(e,t){if(t=u.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var s,i=this;return a(s=e.name?new o(function(t){e.storeName?t(ee(e,i._defaultConfig)):t(e.name+"/")}).then(function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}}):o.reject("Invalid arguments"),t),s}},se=function(e,t){for(var n=e.length,s=0;s<n;){if((i=e[s])===(r=t)||"number"==typeof i&&"number"==typeof r&&isNaN(i)&&isNaN(r))return!0;s++}var i,r;return!1},ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},re={},oe={},ae={INDEXEDDB:R,WEBSQL:Z,LOCALSTORAGE:ne},le=[ae.INDEXEDDB._driver,ae.WEBSQL._driver,ae.LOCALSTORAGE._driver],ce=["dropInstance"],ue=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ce),de={description:"",driver:le.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function he(e,t){e[t]=function(){var n=arguments;return e.ready().then(function(){return e[t].apply(e,n)})}}function pe(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(ie(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var fe=function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ae)if(ae.hasOwnProperty(n)){var s=ae[n],i=s._driver;this[n]=i,re[i]||this.defineDriver(s)}this._defaultConfig=pe({},de),this._config=pe({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":s(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e&&e.driver)||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var s=new o(function(t,n){try{var s=e._driver,i=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(i);for(var r=ue.concat("_initStorage"),l=0,c=r.length;l<c;l++){var u=r[l],d=!se(ce,u);if((d||e[u])&&"function"!=typeof e[u])return void n(i)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=o.reject(t);return a(n,arguments[arguments.length-1]),n}},n=0,s=ce.length;n<s;n++){var i=ce[n];e[i]||(e[i]=t(i))}}();var h=function(n){re[s]&&console.info("Redefining LocalForage driver: "+s),re[s]=e,oe[s]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(h,n):h(!!e._support):h(!0)}catch(e){n(e)}});return l(s,t,n),s},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var s=re[e]?o.resolve(re[e]):o.reject(new Error("Driver not found."));return l(s,t,n),s},e.prototype.getSerializer=function(e){var t=o.resolve(X);return l(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then(function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready});return l(n,e,e),n},e.prototype.setDriver=function(e,t,n){var s=this;ie(e)||(e=[e]);var i=this._getSupportedDrivers(e);function r(){s._config.driver=s.driver()}function a(e){return s._extend(e),r(),s._ready=s._initStorage(s._config),s._ready}var c=null!==this._driverSet?this._driverSet.catch(function(){return o.resolve()}):o.resolve();return this._driverSet=c.then(function(){var e=i[0];return s._dbInfo=null,s._ready=null,s.getDriver(e).then(function(e){s._driver=e._driver,r(),s._wrapLibraryMethodsWithReady(),s._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var i=e[t];return t++,s._dbInfo=null,s._ready=null,s.getDriver(i).then(a).catch(n)}r();var l=new Error("No available storage method found.");return s._driverSet=o.reject(l),s._driverSet}()}}(i)})}).catch(function(){r();var e=new Error("No available storage method found.");return s._driverSet=o.reject(e),s._driverSet}),l(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!oe[e]},e.prototype._extend=function(e){pe(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,s=e.length;n<s;n++){var i=e[n];this.supports(i)&&t.push(i)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=ue.length;e<t;e++)he(this,ue[e])},e.prototype.createInstance=function(t){return new e(t)},e}(),_e=new fe;t.exports=_e},{3:3}]},{},[4])(4)}).call(this,n(3))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s="@@redux-replicate";t.GET_INITIAL_STATE=s+"/GET_INITIAL_STATE",t.GOT_INITIAL_STATE=s+"/GOT_INITIAL_STATE",t.INITIAL_STATE_ERROR=s+"/INITIAL_STATE_ERROR",t.REPLICATE_INITIAL_STATE=s+"/REPLICATE_INITIAL_STATE",t.REPLICATED_INITIAL_STATE=s+"/REPLICATED_INITIAL_STATE",t.REPLICATE_STATE=s+"/REPLICATE_STATE",t.REPLICATED_STATE=s+"/REPLICATED_STATE",t.STATE_CHANGE_ERROR=s+"/STATE_CHANGE_ERROR",t.SET_STATE=s+"/SET_STATE",t.FULLY_INITIALIZED=s+"/FULLY_INITIALIZED"},function(e,t,n){"use strict";(function(e,s){var i,r=n(12);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:s;var o=Object(r.a)(i);t.a=o}).call(this,n(3),n(35)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){return e===t||e&&e.toString&&t&&t.toString&&e.toString()===t.toString()}},function(e,t,n){e.exports=n(26)},function(e,t,n){var s,i;
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */
!function(r){"use strict";void 0===(i="function"==typeof(s=r)?s.call(t,n,t,e):s)||(e.exports=i)}(function(){"use strict";if("undefined"==typeof window||!window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var e,t,n,s,i,r,o,a,l,c,u,d,h,p,f,_,m,v,E,y,C,g={},b=/\s+/g,I=/left|right|inline/,T="Sortable"+(new Date).getTime(),S=window,L=S.document,A=S.parseInt,w=S.setTimeout,R=S.jQuery||S.Zepto,N=S.Polymer,D=!1,O="draggable"in L.createElement("div"),P=!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)&&((C=L.createElement("x")).style.cssText="pointer-events:auto","auto"===C.style.pointerEvents),x=!1,k=Math.abs,M=Math.min,B=[],F=[],H=se(function(e,t,n){if(n&&t.scroll){var s,i,r,o,u,d,h=n[T],p=t.scrollSensitivity,f=t.scrollSpeed,_=e.clientX,m=e.clientY,v=window.innerWidth,E=window.innerHeight;if(l!==n&&(a=t.scroll,l=n,c=t.scrollFn,!0===a)){a=n;do{if(a.offsetWidth<a.scrollWidth||a.offsetHeight<a.scrollHeight)break}while(a=a.parentNode)}a&&(s=a,i=a.getBoundingClientRect(),r=(k(i.right-_)<=p)-(k(i.left-_)<=p),o=(k(i.bottom-m)<=p)-(k(i.top-m)<=p)),r||o||(o=(E-m<=p)-(m<=p),((r=(v-_<=p)-(_<=p))||o)&&(s=S)),g.vx===r&&g.vy===o&&g.el===s||(g.el=s,g.vx=r,g.vy=o,clearInterval(g.pid),s&&(g.pid=setInterval(function(){if(d=o?o*f:0,u=r?r*f:0,"function"==typeof c)return c.call(h,u,d,e);s===S?S.scrollTo(S.pageXOffset+u,S.pageYOffset+d):(s.scrollTop+=d,s.scrollLeft+=u)},24)))}},30),U=function(e){function t(e,t){return void 0!==e&&!0!==e||(e=n.name),"function"==typeof e?e:function(n,s){var i=s.options.group.name;return t?e:e&&(e.join?e.indexOf(i)>-1:i==e)}}var n={},s=e.group;s&&"object"==typeof s||(s={name:s}),n.name=s.name,n.checkPull=t(s.pull,!0),n.checkPut=t(s.put),n.revertClone=s.revertClone,e.group=n};try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){D={capture:!1,passive:!1}}}))}catch(e){}function j(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(e);this.el=e,this.options=t=ie({},t),e[T]=this;var n={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(e.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==j.supportPointer};for(var s in n)!(s in t)&&(t[s]=n[s]);for(var i in U(t),this)"_"===i.charAt(0)&&"function"==typeof this[i]&&(this[i]=this[i].bind(this));this.nativeDraggable=!t.forceFallback&&O,V(e,"mousedown",this._onTapStart),V(e,"touchstart",this._onTapStart),t.supportPointer&&V(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(V(e,"dragover",this),V(e,"dragenter",this)),F.push(this._onDragOver),t.store&&this.sort(t.store.get(this))}function G(t,n){"clone"!==t.lastPullMode&&(n=!0),s&&s.state!==n&&(z(s,"display",n?"none":""),n||s.state&&(t.options.group.revertClone?(i.insertBefore(s,r),t._animate(e,s)):i.insertBefore(s,e)),s.state=n)}function q(e,t,n){if(e){n=n||L;do{if(">*"===t&&e.parentNode===n||ne(e,t))return e}while(e=W(e))}return null}function W(e){var t=e.host;return t&&t.nodeType?t:e.parentNode}function V(e,t,n){e.addEventListener(t,n,D)}function $(e,t,n){e.removeEventListener(t,n,D)}function K(e,t,n){if(e)if(e.classList)e.classList[n?"add":"remove"](t);else{var s=(" "+e.className+" ").replace(b," ").replace(" "+t+" "," ");e.className=(s+(n?" "+t:"")).replace(b," ")}}function z(e,t,n){var s=e&&e.style;if(s){if(void 0===n)return L.defaultView&&L.defaultView.getComputedStyle?n=L.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in s||(t="-webkit-"+t),s[t]=n+("string"==typeof n?"":"px")}}function Y(e,t,n){if(e){var s=e.getElementsByTagName(t),i=0,r=s.length;if(n)for(;i<r;i++)n(s[i],i);return s}return[]}function X(e,t,n,i,r,o,a,l){e=e||t[T];var c=L.createEvent("Event"),u=e.options,d="on"+n.charAt(0).toUpperCase()+n.substr(1);c.initEvent(n,!0,!0),c.to=r||t,c.from=o||t,c.item=i||t,c.clone=s,c.oldIndex=a,c.newIndex=l,t.dispatchEvent(c),u[d]&&u[d].call(e,c)}function J(e,t,n,s,i,r,o,a){var l,c,u=e[T],d=u.options.onMove;return(l=L.createEvent("Event")).initEvent("move",!0,!0),l.to=t,l.from=e,l.dragged=n,l.draggedRect=s,l.related=i||t,l.relatedRect=r||t.getBoundingClientRect(),l.willInsertAfter=a,e.dispatchEvent(l),d&&(c=d.call(u,l,o)),c}function Q(e){e.draggable=!1}function Z(){x=!1}function ee(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,s=0;n--;)s+=t.charCodeAt(n);return s.toString(36)}function te(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e&&(e=e.previousElementSibling);)"TEMPLATE"===e.nodeName.toUpperCase()||">*"!==t&&!ne(e,t)||n++;return n}function ne(e,t){if(e){var n=(t=t.split(".")).shift().toUpperCase(),s=new RegExp("\\s("+t.join("|")+")(?=\\s)","g");return!(""!==n&&e.nodeName.toUpperCase()!=n||t.length&&((" "+e.className+" ").match(s)||[]).length!=t.length)}return!1}function se(e,t){var n,s;return function(){void 0===n&&(n=arguments,s=this,w(function(){1===n.length?e.call(s,n[0]):e.apply(s,n),n=void 0},t))}}function ie(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function re(e){return N&&N.dom?N.dom(e).cloneNode(!0):R?R(e).clone(!0)[0]:e.cloneNode(!0)}function oe(e){return w(e,0)}function ae(e){return clearTimeout(e)}return j.prototype={constructor:j,_onTapStart:function(t){var n,s=this,i=this.el,r=this.options,a=r.preventOnFilter,l=t.type,c=t.touches&&t.touches[0],u=(c||t).target,d=t.target.shadowRoot&&t.path&&t.path[0]||u,h=r.filter;if(function(e){var t=e.getElementsByTagName("input"),n=t.length;for(;n--;){var s=t[n];s.checked&&B.push(s)}}(i),!e&&!(/mousedown|pointerdown/.test(l)&&0!==t.button||r.disabled)&&!d.isContentEditable&&(u=q(u,r.draggable,i))&&o!==u){if(n=te(u,r.draggable),"function"==typeof h){if(h.call(this,t,u,this))return X(s,d,"filter",u,i,i,n),void(a&&t.preventDefault())}else if(h&&(h=h.split(",").some(function(e){if(e=q(d,e.trim(),i))return X(s,e,"filter",u,i,i,n),!0})))return void(a&&t.preventDefault());r.handle&&!q(d,r.handle,i)||this._prepareDragStart(t,c,u,n)}},_prepareDragStart:function(n,s,a,l){var c,u=this,d=u.el,h=u.options,f=d.ownerDocument;a&&!e&&a.parentNode===d&&(v=n,i=d,t=(e=a).parentNode,r=e.nextSibling,o=a,_=h.group,p=l,this._lastX=(s||n).clientX,this._lastY=(s||n).clientY,e.style["will-change"]="all",c=function(){u._disableDelayedDrag(),e.draggable=u.nativeDraggable,K(e,h.chosenClass,!0),u._triggerDragStart(n,s),X(u,i,"choose",e,i,i,p)},h.ignore.split(",").forEach(function(t){Y(e,t.trim(),Q)}),V(f,"mouseup",u._onDrop),V(f,"touchend",u._onDrop),V(f,"touchcancel",u._onDrop),V(f,"selectstart",u),h.supportPointer&&V(f,"pointercancel",u._onDrop),h.delay?(V(f,"mouseup",u._disableDelayedDrag),V(f,"touchend",u._disableDelayedDrag),V(f,"touchcancel",u._disableDelayedDrag),V(f,"mousemove",u._disableDelayedDrag),V(f,"touchmove",u._disableDelayedDrag),h.supportPointer&&V(f,"pointermove",u._disableDelayedDrag),u._dragStartTimer=w(c,h.delay)):c())},_disableDelayedDrag:function(){var e=this.el.ownerDocument;clearTimeout(this._dragStartTimer),$(e,"mouseup",this._disableDelayedDrag),$(e,"touchend",this._disableDelayedDrag),$(e,"touchcancel",this._disableDelayedDrag),$(e,"mousemove",this._disableDelayedDrag),$(e,"touchmove",this._disableDelayedDrag),$(e,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(t,n){(n=n||("touch"==t.pointerType?t:null))?(v={target:e,clientX:n.clientX,clientY:n.clientY},this._onDragStart(v,"touch")):this.nativeDraggable?(V(e,"dragend",this),V(i,"dragstart",this._onDragStart)):this._onDragStart(v,!0);try{L.selection?oe(function(){L.selection.empty()}):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(){if(i&&e){var t=this.options;K(e,t.ghostClass,!0),K(e,t.dragClass,!1),j.active=this,X(this,i,"start",e,i,i,p)}else this._nulling()},_emulateDragOver:function(){if(E){if(this._lastX===E.clientX&&this._lastY===E.clientY)return;this._lastX=E.clientX,this._lastY=E.clientY,P||z(n,"display","none");var e=L.elementFromPoint(E.clientX,E.clientY),t=e,s=F.length;if(e&&e.shadowRoot&&(t=e=e.shadowRoot.elementFromPoint(E.clientX,E.clientY)),t)do{if(t[T]){for(;s--;)F[s]({clientX:E.clientX,clientY:E.clientY,target:e,rootEl:t});break}e=t}while(t=t.parentNode);P||z(n,"display","")}},_onTouchMove:function(e){if(v){var t=this.options,s=t.fallbackTolerance,i=t.fallbackOffset,r=e.touches?e.touches[0]:e,o=r.clientX-v.clientX+i.x,a=r.clientY-v.clientY+i.y,l=e.touches?"translate3d("+o+"px,"+a+"px,0)":"translate("+o+"px,"+a+"px)";if(!j.active){if(s&&M(k(r.clientX-this._lastX),k(r.clientY-this._lastY))<s)return;this._dragStarted()}this._appendGhost(),y=!0,E=r,z(n,"webkitTransform",l),z(n,"mozTransform",l),z(n,"msTransform",l),z(n,"transform",l),e.preventDefault()}},_appendGhost:function(){if(!n){var t,s=e.getBoundingClientRect(),r=z(e),o=this.options;K(n=e.cloneNode(!0),o.ghostClass,!1),K(n,o.fallbackClass,!0),K(n,o.dragClass,!0),z(n,"top",s.top-A(r.marginTop,10)),z(n,"left",s.left-A(r.marginLeft,10)),z(n,"width",s.width),z(n,"height",s.height),z(n,"opacity","0.8"),z(n,"position","fixed"),z(n,"zIndex","100000"),z(n,"pointerEvents","none"),o.fallbackOnBody&&L.body.appendChild(n)||i.appendChild(n),t=n.getBoundingClientRect(),z(n,"width",2*s.width-t.width),z(n,"height",2*s.height-t.height)}},_onDragStart:function(t,n){var r=this,o=t.dataTransfer,a=r.options;r._offUpEvents(),_.checkPull(r,r,e,t)&&((s=re(e)).draggable=!1,s.style["will-change"]="",z(s,"display","none"),K(s,r.options.chosenClass,!1),r._cloneId=oe(function(){i.insertBefore(s,e),X(r,i,"clone",e)})),K(e,a.dragClass,!0),n?("touch"===n?(V(L,"touchmove",r._onTouchMove),V(L,"touchend",r._onDrop),V(L,"touchcancel",r._onDrop),a.supportPointer&&(V(L,"pointermove",r._onTouchMove),V(L,"pointerup",r._onDrop))):(V(L,"mousemove",r._onTouchMove),V(L,"mouseup",r._onDrop)),r._loopId=setInterval(r._emulateDragOver,50)):(o&&(o.effectAllowed="move",a.setData&&a.setData.call(r,o,e)),V(L,"drop",r),r._dragStartId=oe(r._dragStarted))},_onDragOver:function(o){var a,l,c,p,f=this.el,v=this.options,E=v.group,C=j.active,g=_===E,b=!1,S=v.sort;if(void 0!==o.preventDefault&&(o.preventDefault(),!v.dragoverBubble&&o.stopPropagation()),!e.animated&&(y=!0,C&&!v.disabled&&(g?S||(p=!i.contains(e)):m===this||(C.lastPullMode=_.checkPull(this,C,e,o))&&E.checkPut(this,C,e,o))&&(void 0===o.rootEl||o.rootEl===this.el))){if(H(o,v,this.el),x)return;if(a=q(o.target,v.draggable,f),l=e.getBoundingClientRect(),m!==this&&(m=this,b=!0),p)return G(C,!0),t=i,void(s||r?i.insertBefore(e,s||r):S||i.appendChild(e));if(0===f.children.length||f.children[0]===n||f===o.target&&function(e,t){var n=e.lastElementChild.getBoundingClientRect();return t.clientY-(n.top+n.height)>5||t.clientX-(n.left+n.width)>5}(f,o)){if(0!==f.children.length&&f.children[0]!==n&&f===o.target&&(a=f.lastElementChild),a){if(a.animated)return;c=a.getBoundingClientRect()}G(C,g),!1!==J(i,f,e,l,a,c,o)&&(e.contains(f)||(f.appendChild(e),t=f),this._animate(l,e),a&&this._animate(c,a))}else if(a&&!a.animated&&a!==e&&void 0!==a.parentNode[T]){u!==a&&(u=a,d=z(a),h=z(a.parentNode));var L=(c=a.getBoundingClientRect()).right-c.left,A=c.bottom-c.top,R=I.test(d.cssFloat+d.display)||"flex"==h.display&&0===h["flex-direction"].indexOf("row"),N=a.offsetWidth>e.offsetWidth,D=a.offsetHeight>e.offsetHeight,O=(R?(o.clientX-c.left)/L:(o.clientY-c.top)/A)>.5,P=a.nextElementSibling,k=!1;if(R){var M=e.offsetTop,B=a.offsetTop;k=M===B?a.previousElementSibling===e&&!N||O&&N:a.previousElementSibling===e||e.previousElementSibling===a?(o.clientY-c.top)/A>.5:B>M}else b||(k=P!==e&&!D||O&&D);var F=J(i,f,e,l,a,c,o,k);!1!==F&&(1!==F&&-1!==F||(k=1===F),x=!0,w(Z,30),G(C,g),e.contains(f)||(k&&!P?f.appendChild(e):a.parentNode.insertBefore(e,k?P:a)),t=e.parentNode,this._animate(l,e),this._animate(c,a))}}},_animate:function(e,t){var n=this.options.animation;if(n){var s=t.getBoundingClientRect();1===e.nodeType&&(e=e.getBoundingClientRect()),z(t,"transition","none"),z(t,"transform","translate3d("+(e.left-s.left)+"px,"+(e.top-s.top)+"px,0)"),t.offsetWidth,z(t,"transition","all "+n+"ms"),z(t,"transform","translate3d(0,0,0)"),clearTimeout(t.animated),t.animated=w(function(){z(t,"transition",""),z(t,"transform",""),t.animated=!1},n)}},_offUpEvents:function(){var e=this.el.ownerDocument;$(L,"touchmove",this._onTouchMove),$(L,"pointermove",this._onTouchMove),$(e,"mouseup",this._onDrop),$(e,"touchend",this._onDrop),$(e,"pointerup",this._onDrop),$(e,"touchcancel",this._onDrop),$(e,"pointercancel",this._onDrop),$(e,"selectstart",this)},_onDrop:function(o){var a=this.el,l=this.options;clearInterval(this._loopId),clearInterval(g.pid),clearTimeout(this._dragStartTimer),ae(this._cloneId),ae(this._dragStartId),$(L,"mouseover",this),$(L,"mousemove",this._onTouchMove),this.nativeDraggable&&($(L,"drop",this),$(a,"dragstart",this._onDragStart)),this._offUpEvents(),o&&(y&&(o.preventDefault(),!l.dropBubble&&o.stopPropagation()),n&&n.parentNode&&n.parentNode.removeChild(n),i!==t&&"clone"===j.active.lastPullMode||s&&s.parentNode&&s.parentNode.removeChild(s),e&&(this.nativeDraggable&&$(e,"dragend",this),Q(e),e.style["will-change"]="",K(e,this.options.ghostClass,!1),K(e,this.options.chosenClass,!1),X(this,i,"unchoose",e,t,i,p),i!==t?(f=te(e,l.draggable))>=0&&(X(null,t,"add",e,t,i,p,f),X(this,i,"remove",e,t,i,p,f),X(null,t,"sort",e,t,i,p,f),X(this,i,"sort",e,t,i,p,f)):e.nextSibling!==r&&(f=te(e,l.draggable))>=0&&(X(this,i,"update",e,t,i,p,f),X(this,i,"sort",e,t,i,p,f)),j.active&&(null!=f&&-1!==f||(f=p),X(this,i,"end",e,t,i,p,f),this.save()))),this._nulling()},_nulling:function(){i=e=t=n=r=s=o=a=l=v=E=y=f=u=d=m=_=j.active=null,B.forEach(function(e){e.checked=!0}),B.length=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragover":case"dragenter":e&&(this._onDragOver(t),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move");e.preventDefault()}(t));break;case"mouseover":this._onDrop(t);break;case"selectstart":t.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,s=0,i=n.length,r=this.options;s<i;s++)q(e=n[s],r.draggable,this.el)&&t.push(e.getAttribute(r.dataIdAttr)||ee(e));return t},sort:function(e){var t={},n=this.el;this.toArray().forEach(function(e,s){var i=n.children[s];q(i,this.options.draggable,n)&&(t[e]=i)},this),e.forEach(function(e){t[e]&&(n.removeChild(t[e]),n.appendChild(t[e]))})},save:function(){var e=this.options.store;e&&e.set(this)},closest:function(e,t){return q(e,t||this.options.draggable,this.el)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];n[e]=t,"group"===e&&U(n)},destroy:function(){var e=this.el;e[T]=null,$(e,"mousedown",this._onTapStart),$(e,"touchstart",this._onTapStart),$(e,"pointerdown",this._onTapStart),this.nativeDraggable&&($(e,"dragover",this),$(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(e){e.removeAttribute("draggable")}),F.splice(F.indexOf(this._onDragOver),1),this._onDrop(),this.el=e=null}},V(L,"touchmove",function(e){j.active&&e.preventDefault()}),j.utils={on:V,off:$,css:z,find:Y,is:function(e,t){return!!q(e,t,e)},extend:ie,throttle:se,closest:q,toggleClass:K,clone:re,index:te,nextTick:oe,cancelNextTick:ae},j.create=function(e,t){return new j(e,t)},j.version="1.7.0",j})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],s=!0,i=!1,r=void 0;try{for(var o,a=e[Symbol.iterator]();!(s=(o=a.next()).done)&&(n.push(o.value),!t||n.length!==t);s=!0);}catch(e){i=!0,r=e}finally{try{!s&&a.return&&a.return()}finally{if(i)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),r=l(n(4)),o=l(n(31)),a=n(30);function l(e){return e&&e.__esModule?e:{default:e}}var c=r.default.createInstance({name:"data"}),u=r.default.createInstance({name:"queries"});window.localforageReplicator={dataStore:c,queryStore:u};var d=Boolean(window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB),h=d?function(e){return e}:a.stringify,p=d?function(e){return e}:a.parse,f="__ENTIRE_STATE__",_="__EMPTY_STATE__",m={},v={},E={},y={},C=0,g=null,b="undefined"!=typeof console?console.warn.bind(console):function(){};function I(e,t){return t?e+"/"+t:e}function T(e){var t=arguments.length<=1||void 0===arguments[1]?f:arguments[1];return void 0===e?e=_:("string"!=typeof e&&(e=d?JSON.stringify(e):h(e)),e.length>40&&(e=(0,o.default)(e))),encodeURIComponent(t)+"="+encodeURIComponent(e)}function S(e){var t,n=e.store,s=e.reducerKey,i=e.setState,r=e.setError,o=I(n.key,s),a=function(e,t){e?r(e):void 0===t||null===t?i():i(p(t))};m[o]?m[o].push(a):(t=function(e,t){void 0!==v[o]&&(t=v[o]);var n=m[o];for(delete m[o];n.length;)n.shift()(e,t)},m[o]=[a],c.getItem(o).then(function(e){t(null,e)}).catch(function(e){t(e)}))}function L(){if(C--,g&&!C){for(;g.length;)g.shift()();g=null}}function A(e,t,n,s){var i=[],r=null,o=e.length*t.length,a=function(){0==--o&&(r?s(r):n(i))};if(o){var l=!0,c=!1,u=void 0;try{for(var d,h=function(){var e=d.value,n={};i.push(n);var s=!0,o=!1,l=void 0;try{for(var c,u=function(){var t=c.value;S({store:{key:e},reducerKey:t,setState:function(e){n[t]=e,a()},setError:function(e){r=e}})},h=t[Symbol.iterator]();!(s=(c=h.next()).done);s=!0)u()}catch(e){o=!0,l=e}finally{try{!s&&h.return&&h.return()}finally{if(o)throw l}}},p=e[Symbol.iterator]();!(l=(d=p.next()).done);l=!0)h()}catch(e){c=!0,u=e}finally{try{!l&&p.return&&p.return()}finally{if(c)throw u}}}else o=1,a()}var w={getInitialState:S,onStateChange:function(e){var t=e.store,n=e.reducerKey,s=e.nextState,r=e.queryable,o=e.setStatus,a=e.setError,l=t.key,d=I(l,n),p=r&&T(s,n),f=function(e){b(e),a(e)};v[d]=s,r&&(C++,g||(g=[])),clearTimeout(E[d]),E[d]=setTimeout(function(){s=v[d],delete v[d],r?Promise.all([c.getItem(d),c.getItem(p),c.setItem(d,h(s))]).then(function(e){var t=i(e,2),s=t[0],r=t[1],a=T(s,n);(r=y[p]||r||{})[l]=!0,y[p]=r,Promise.all([u.getItem(a),u.setItem(p,r)]).then(function(e){var t=i(e,1)[0];t&&p!==a?(delete(t=y[a]||t)[l],y[a]=t,u.setItem(a,t).then(L).then(function(){return o()}).catch(f)):(L(),o())}).catch(f)}).catch(f):c.setItem(d,h(s)).then(function(){return o()}).catch(f)},w.debounce)},handleQuery:function(e){var t,n,i,r=e.query,o=e.options,a=e.setResult,l=e.setError,c=null,d=1,h=function(){0==--d&&function(){var e=o.begin,t=void 0===e?0:e;if(c=Object.keys(c),o.sortBy){for(var n in o.sortBy)o.select.indexOf(n)<0&&o.select.push(n);A(c,o.select,function(e){var n=function(t){var n=o.sortBy[t]>0;e.sort(n?function(e,n){return e[t]>n[t]?1:e[t]<n[t]?-1:0}:function(e,n){return e[t]<n[t]?1:e[t]>n[t]?-1:0})};for(var s in o.sortBy)n(s);void 0!==o.end?a(e.slice(t,o.end)):o.limit?a(e.slice(t,t+o.limit)):a(e)})}else o.length?a(c&&c.length||0):o.keys?a(c):void 0!==o.end?a(result.slice(t,o.end)):o.limit?a(result.slice(t,t+o.limit)):A(c,o.select,a,l)}()};"object"!==(void 0===r?"undefined":s(r))&&(i=r,(n=f)in(t={})?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i,r=t),Object.keys(r).forEach(function(e){var t=T(r[e],e,!1);function n(){u.getItem(t).then(function(e){if(c)for(var t in c)e&&void 0!==e[t]||delete c[t];else c=e||{};h()}).catch(function(e){l(e),h()})}d++,g?g.push(n):n()}),h()},debounce:10};t.default=w},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FULLY_INITIALIZED=t.SET_STATE=t.STATE_CHANGE_ERROR=t.REPLICATED_STATE=t.REPLICATE_STATE=t.REPLICATED_INITIAL_STATE=t.REPLICATE_INITIAL_STATE=t.INITIAL_STATE_ERROR=t.GOT_INITIAL_STATE=t.GET_INITIAL_STATE=t.storeKeysEqual=t.replicate=void 0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},i=l(n(34)),r=l(n(32)),o=l(n(7)),a=n(5);function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){return function(t){return function(n,o,l){var c=null;e=s({},e);return(c=t(function(t,i){var o=t;return i.type!==a.SET_STATE||i.mergedState||(o=e.reducerKeys?s({},t,i.nextState):i.nextState,i.mergedState=!0),o=n(o,i),i._skipReplication||(0,r.default)(c,e,t,o,i),o},o,l)).replication||(c.replication=[]),c.replication.push(e),c.onReady||(c.readyCallbacks=[],c.onReady=function(e){return c.readyCallbacks.push(e)}),void 0!==e.key&&(c.key=e.key),c.setKey||(c.setKey=function(e,t){c.key=e,t&&c.onReady(t),c.replication.forEach(function(e){(0,i.default)(c,e)})}),c.setState||(c.setState=function(e,t,n){c.dispatch({type:a.SET_STATE,nextState:e,_skipReplication:t,__create:n})}),(0,i.default)(c,e),c}}};t.default=c,t.replicate=c,t.storeKeysEqual=o.default,t.GET_INITIAL_STATE=a.GET_INITIAL_STATE,t.GOT_INITIAL_STATE=a.GOT_INITIAL_STATE,t.INITIAL_STATE_ERROR=a.INITIAL_STATE_ERROR,t.REPLICATE_INITIAL_STATE=a.REPLICATE_INITIAL_STATE,t.REPLICATED_INITIAL_STATE=a.REPLICATED_INITIAL_STATE,t.REPLICATE_STATE=a.REPLICATE_STATE,t.REPLICATED_STATE=a.REPLICATED_STATE,t.STATE_CHANGE_ERROR=a.STATE_CHANGE_ERROR,t.SET_STATE=a.SET_STATE,t.FULLY_INITIALIZED=a.FULLY_INITIALIZED},function(e,t,n){"use strict";function s(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return s})},function(e,t,n){e.exports=function(e,t){if("string"==typeof e){var n=e;if(!(e=window.document.querySelector(e)))throw new Error('"'+n+'" does not match any HTML elements')}if(!e)throw new Error('"'+e+'" is not a valid HTML element');"function"==typeof t&&(t={onDrop:t});var a;return e.addEventListener("dragenter",l,!1),e.addEventListener("dragover",c,!1),e.addEventListener("dragleave",u,!1),e.addEventListener("drop",d,!1),function(){h(),e.removeEventListener("dragenter",l,!1),e.removeEventListener("dragover",c,!1),e.removeEventListener("dragleave",u,!1),e.removeEventListener("drop",d,!1)};function l(e){return t.onDragEnter&&t.onDragEnter(e),e.stopPropagation(),e.preventDefault(),!1}function c(n){if(n.stopPropagation(),n.preventDefault(),n.dataTransfer.items){var s=o(n.dataTransfer.items),i=s.filter(function(e){return"file"===e.kind}),r=s.filter(function(e){return"string"===e.kind});if(0===i.length&&!t.onDropText)return;if(0===r.length&&!t.onDrop)return;if(0===i.length&&0===r.length)return}return e.classList.add("drag"),clearTimeout(a),t.onDragOver&&t.onDragOver(n),n.dataTransfer.dropEffect="copy",!1}function u(e){return e.stopPropagation(),e.preventDefault(),t.onDragLeave&&t.onDragLeave(e),clearTimeout(a),a=setTimeout(h,50),!1}function d(e){e.stopPropagation(),e.preventDefault(),t.onDragLeave&&t.onDragLeave(e),clearTimeout(a),h();var n={x:e.clientX,y:e.clientY},l=e.dataTransfer.getData("text");if(l&&t.onDropText&&t.onDropText(l,n),e.dataTransfer.files){console.log("e.dataTransfer.files");var c=o(e.dataTransfer.files);if(0===c.length)return;c.forEach(function(e){e.fullPath="/"+e.name}),t.onDrop&&t.onDrop(c,n)}else if(e.dataTransfer.items){console.log("e.dataTransfer.items");var u=o(e.dataTransfer.items).filter(function(e){return"file"===e.kind});if(0===u.length)return;i(u.map(function(e){return function(t){!function(e,t){var n=[];if(e.isFile)e.file(function(n){n.fullPath=e.fullPath,t(null,n)},function(e){t(e)});else if(e.isDirectory){var s=e.createReader();!function e(){s.readEntries(function(s){s.length>0?(n=n.concat(o(s)),e()):i(n.map(function(e){return function(t){r(e,t)}}),t)})}()}}(e.webkitGetAsEntry(),t)}}),function(e,i){if(e)throw e;t.onDrop&&t.onDrop(s(i),n)})}return!1}function h(){e.classList.remove("drag")}};var s=n(38),i=n(37);function r(e,t){var n=[];if(e.isFile){e.file(function(n){n.fullPath=e.fullPath;t(null,n)},function(e){t(e)})}else if(e.isDirectory){var s=e.createReader();a()}function a(){s.readEntries(function(e){if(e.length>0){n=n.concat(o(e));a()}else{l()}})}function l(){i(n.map(function(e){return function(t){r(e,t)}}),t)}}function o(e){return Array.prototype.slice.call(e||[],0)}},function(e,t,n){"use strict";n.r(t);var s=n(13),i=n.n(s),r=n(39),o="object"==typeof self&&self&&self.Object===Object&&self,a=(r.a||o||Function("return this")()).Symbol,l=Object.prototype,c=l.hasOwnProperty,u=l.toString,d=a?a.toStringTag:void 0;var h=function(e){var t=c.call(e,d),n=e[d];try{e[d]=void 0;var s=!0}catch(e){}var i=u.call(e);return s&&(t?e[d]=n:delete e[d]),i},p=Object.prototype.toString;var f=function(e){return p.call(e)},_="[object Null]",m="[object Undefined]",v=a?a.toStringTag:void 0;var E=function(e){return null==e?void 0===e?m:_:v&&v in Object(e)?h(e):f(e)};var y=function(e,t){return function(n){return e(t(n))}}(Object.getPrototypeOf,Object);var C=function(e){return null!=e&&"object"==typeof e},g="[object Object]",b=Function.prototype,I=Object.prototype,T=b.toString,S=I.hasOwnProperty,L=T.call(Object);var A=function(e){if(!C(e)||E(e)!=g)return!1;var t=y(e);if(null===t)return!0;var n=S.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&T.call(n)==L},w=n(6),R={INIT:"@@redux/INIT"};function N(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}Object.assign;var D=n(11),O=n.n(D),P=n(10),x=n.n(P),k=n(4),M=n.n(k);const B={ADD_IMAGE:(e,t)=>({...e,images:e.images.concat([t.image]),count:e.count+1}),REMOVE_IMAGE:(e,t)=>({...e,images:e.images.reduce((e,n)=>(n.id!==t.id&&e.push(n),e),[]),count:e.count-1}),SORT_IMAGE:(e,{newIndex:t,oldIndex:n})=>{const s=[].concat(e.images),i=e.images[n];e.images[t],e.count;let r=t;t>n&&(r=t+1),s.splice(r,0,i);let o=n;return t<n&&(o=n+1),s.splice(o,1),{...e,images:s}},ADD_IMAGE_COLLECTION:(e,t)=>({...e,images:e.images.concat(t.images),count:e.count+t.images.length}),CLEAR:(e,t)=>({images:[],count:0})};var F=function(e,t){return t.type in B?B[t.type](e,t):e},H=n(0),U=n.n(H);n(29);const j=e=>`\n  <div class="count-number">${e}</div>\n`;var G=class{constructor(e){this.store=e,this.state=this.getState(),e.subscribe(()=>{const e=this.getState();e!==this.state&&(this.state=e,this.render())})}getState(){return this.store.getState().count}mount(e){return this.el=new U.a(e),this}render(e){const t=j(e||this.state);this.el.html(t)}},q=n(9),W=n.n(q),V=n(8),$=n.n(V);n(23);var K=new class{constructor(){this.$el=new U.a("#loading")}show(){this.$el.appear()}hide(){this.$el.disappear()}};n(21);const z=(e=[])=>e.map((e,t)=>$()({...e,index:t})).join("");var Y=class{constructor(e){this.store=e,this.state=this.getState(),this.initialized=!1,e.subscribe(()=>{const e=this.getState();e!==this.state&&(K.hide(),this.initialized||setTimeout(()=>{this.render()}),this.state=e,this.initialized=!0)})}didCountChange(e){return e.length!==this.state.length}removeImage(e,{id:t}){e.stopPropagation(),new U.a(`#image-${t}`).remove(),this.store.dispatch({type:"REMOVE_IMAGE",id:t})}add(e){this.store.dispatch({type:"ADD_IMAGE_COLLECTION",images:e}),this.initialized&&(this.$el.appendHtml(z(e)),setTimeout(()=>{this.loadImages()}))}getState(){return this.store.getState().images}events(){this.$el.on("click",e=>{e.stopPropagation(),console.log("IMAGE LIST CLICK",e),e.target.className.match(/^remove.*$/)&&this.removeImage(e,e.target.dataset)})}mount(e){return this.$el=new U.a(e),this.events(),this}onSort({oldIndex:e,newIndex:t,item:n}){const{id:s}=n.dataset;this.store.dispatch({type:"SORT_IMAGE",newIndex:t,oldIndex:e})}render(){const e=z(this.state);this.$el.html(e),setTimeout(()=>{this.loadImages()},100),W.a.create(this.$el.get(),{onSort:e=>this.onSort(e)})}loadImages(e){(e=e||Array.from(document.querySelectorAll(".image.pending .image-element"))).splice(0,3).forEach(e=>{const t=new U.a(e),n=t.attr("data-style");n&&t.attr("style",n).attr("data-style",!1).removeClass("pending")}),e.length&&setTimeout(()=>{this.loadImages(e)},100)}};n(19);var X=class{onAction(e){console.log("NOTIFIER action",e)}show(e){return this.$el.get().MaterialSnackbar.showSnackbar(e),this}mount(e){return this.$el=new U.a(e),this}},J={$imageList:new U.a("#image-list")};n(17);const Q=e=>`\n  <div id="clear-action" class="reset ${e?"":"disabled"}">\n    <div class="action-icon no-events">\n      <i class="material-icons">clear</i>\n    </div>\n  </div>\n`;var Z=class{constructor(e){this.store=e,this.state=this.getState(),e.subscribe(()=>{const e=this.getState();e!==this.state&&(this.state=e,this.render())})}getState(){return this.store.getState().count}clear(){this.state&&confirm("Are you sure you want to remove ALL images?")&&(J.$imageList.html(""),this.store.dispatch({type:"CLEAR"}))}events(){this.$el.on("click",e=>{if("clear-action"===e.target.id)return this.clear()})}mount(e){return this.$el=new U.a(e),this.events(),this}render(){const e=Q(this.state);this.$el.html(e)}};n(15);const ee=N(O()({key:"imgest",reducerKeys:!0,replicator:x.a}))(function e(t,n,s){var i;if("function"==typeof n&&void 0===s&&(s=n,n=void 0),void 0!==s){if("function"!=typeof s)throw new Error("Expected the enhancer to be a function.");return s(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var r=t,o=n,a=[],l=a,c=!1;function u(){l===a&&(l=a.slice())}function d(){return o}function h(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return u(),l.push(e),function(){if(t){t=!1,u();var n=l.indexOf(e);l.splice(n,1)}}}function p(e){if(!A(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,o=r(o,e)}finally{c=!1}for(var t=a=l,n=0;n<t.length;n++)(0,t[n])();return e}return p({type:R.INIT}),(i={dispatch:p,subscribe:h,getState:d,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");r=e,p({type:R.INIT})}})[w.a]=function(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(d())}return n(),{unsubscribe:t(n)}}})[w.a]=function(){return this},e},i})(F,{count:0,images:[]});M.a.config({name:"data"}),M.a.getItem("imgest/count",(e,t)=>{if(e)return console.error("ERR getting images/count:",e);t>0&&K.show(),new G(ee).mount("#count").render(t)});const te=new X;te.mount("#notifier");const ne=new Y(ee);ne.mount("#image-list").render(),new Z(ee).mount("#actions").render(),i()("body",(e,t)=>{K.show();const n=e.length,s=[];(e=Array.from(e)).forEach((e,t)=>{const i=e.type||"image/jpeg",r=new FileReader;r.addEventListener("load",r=>{const o=r.target.result;s.push({id:`${t}-${(new Date).getTime()}`,name:e.name,description:"",src:`data:${i};${o}`}),n===s.length&&ne.add(s)}),r.addEventListener("error",e=>{console.error("FileReader error"+e)}),r.readAsDataURL(e)})}),setTimeout(()=>{te.show({message:"Rock it!"})},2e3)},function(e,t){
/**
 * material-design-lite - Material Design Components in CSS, JS and HTML
 * @version v1.3.0
 * @license Apache-2.0
 * @copyright 2015 Google, Inc.
 * @link https://github.com/google/material-design-lite
 */
!function(){"use strict";function e(e,t){if(e){if(t.element_.classList.contains(t.CssClasses_.MDL_JS_RIPPLE_EFFECT)){var n=document.createElement("span");n.classList.add(t.CssClasses_.MDL_RIPPLE_CONTAINER),n.classList.add(t.CssClasses_.MDL_JS_RIPPLE_EFFECT);var s=document.createElement("span");s.classList.add(t.CssClasses_.MDL_RIPPLE),n.appendChild(s),e.appendChild(n)}e.addEventListener("click",function(n){if("#"===e.getAttribute("href").charAt(0)){n.preventDefault();var s=e.href.split("#")[1],i=t.element_.querySelector("#"+s);t.resetTabState_(),t.resetPanelState_(),e.classList.add(t.CssClasses_.ACTIVE_CLASS),i.classList.add(t.CssClasses_.ACTIVE_CLASS)}})}}function t(e,t,n,s){function i(){var i=e.href.split("#")[1],r=s.content_.querySelector("#"+i);s.resetTabState_(t),s.resetPanelState_(n),e.classList.add(s.CssClasses_.IS_ACTIVE),r.classList.add(s.CssClasses_.IS_ACTIVE)}if(s.tabBar_.classList.contains(s.CssClasses_.JS_RIPPLE_EFFECT)){var r=document.createElement("span");r.classList.add(s.CssClasses_.RIPPLE_CONTAINER),r.classList.add(s.CssClasses_.JS_RIPPLE_EFFECT);var o=document.createElement("span");o.classList.add(s.CssClasses_.RIPPLE),r.appendChild(o),e.appendChild(r)}s.tabBar_.classList.contains(s.CssClasses_.TAB_MANUAL_SWITCH)||e.addEventListener("click",function(t){"#"===e.getAttribute("href").charAt(0)&&(t.preventDefault(),i())}),e.show=i}var n={upgradeDom:function(e,t){},upgradeElement:function(e,t){},upgradeElements:function(e){},upgradeAllRegistered:function(){},registerUpgradedCallback:function(e,t){},register:function(e){},downgradeElements:function(e){}};(n=function(){function e(e,t){for(var n=0;n<a.length;n++)if(a[n].className===e)return void 0!==t&&(a[n]=t),a[n];return!1}function t(e){var t=e.getAttribute("data-upgraded");return null===t?[""]:t.split(",")}function n(e,n){return-1!==t(e).indexOf(n)}function s(e,t,n){if("CustomEvent"in window&&"function"==typeof window.CustomEvent)return new CustomEvent(e,{bubbles:t,cancelable:n});var s=document.createEvent("Events");return s.initEvent(e,t,n),s}function i(t,n){if(void 0===t&&void 0===n)for(var s=0;s<a.length;s++)i(a[s].className,a[s].cssClass);else{var o=t;if(void 0===n){var l=e(o);l&&(n=l.cssClass)}for(var c=document.querySelectorAll("."+n),u=0;u<c.length;u++)r(c[u],o)}}function r(i,r){if(!("object"==typeof i&&i instanceof Element))throw new Error("Invalid argument provided to upgrade MDL element.");var o=s("mdl-componentupgrading",!0,!0);if(i.dispatchEvent(o),!o.defaultPrevented){var u=t(i),d=[];if(r)n(i,r)||d.push(e(r));else{var h=i.classList;a.forEach(function(e){h.contains(e.cssClass)&&-1===d.indexOf(e)&&!n(i,e.className)&&d.push(e)})}for(var p,f=0,_=d.length;f<_;f++){if(!(p=d[f]))throw new Error("Unable to find a registered component for the given class.");u.push(p.className),i.setAttribute("data-upgraded",u.join(","));var m=new p.classConstructor(i);m[c]=p,l.push(m);for(var v=0,E=p.callbacks.length;v<E;v++)p.callbacks[v](i);p.widget&&(i[p.className]=m);var y=s("mdl-componentupgraded",!0,!1);i.dispatchEvent(y)}}}function o(e){if(e){var t=l.indexOf(e);l.splice(t,1);var n=e.element_.getAttribute("data-upgraded").split(","),i=n.indexOf(e[c].classAsString);n.splice(i,1),e.element_.setAttribute("data-upgraded",n.join(","));var r=s("mdl-componentdowngraded",!0,!1);e.element_.dispatchEvent(r)}}var a=[],l=[],c="mdlComponentConfigInternal_";return{upgradeDom:i,upgradeElement:r,upgradeElements:function e(t){Array.isArray(t)||(t=t instanceof Element?[t]:Array.prototype.slice.call(t));for(var n,s=0,i=t.length;s<i;s++)(n=t[s])instanceof HTMLElement&&(r(n),n.children.length>0&&e(n.children))},upgradeAllRegistered:function(){for(var e=0;e<a.length;e++)i(a[e].className)},registerUpgradedCallback:function(t,n){var s=e(t);s&&s.callbacks.push(n)},register:function(t){var n=!0;void 0===t.widget&&void 0===t.widget||(n=t.widget||t.widget);var s={classConstructor:t.constructor||t.constructor,className:t.classAsString||t.classAsString,cssClass:t.cssClass||t.cssClass,widget:n,callbacks:[]};if(a.forEach(function(e){if(e.cssClass===s.cssClass)throw new Error("The provided cssClass has already been registered: "+e.cssClass);if(e.className===s.className)throw new Error("The provided className has already been registered")}),t.constructor.prototype.hasOwnProperty(c))throw new Error("MDL component classes must not have "+c+" defined as a property.");e(t.classAsString,s)||a.push(s)},downgradeElements:function(e){var t=function(e){l.filter(function(t){return t.element_===e}).forEach(o)};if(e instanceof Array||e instanceof NodeList)for(var n=0;n<e.length;n++)t(e[n]);else{if(!(e instanceof Node))throw new Error("Invalid argument provided to downgrade MDL nodes.");t(e)}}}}()).ComponentConfigPublic,n.ComponentConfig,n.Component,n.upgradeDom=n.upgradeDom,n.upgradeElement=n.upgradeElement,n.upgradeElements=n.upgradeElements,n.upgradeAllRegistered=n.upgradeAllRegistered,n.registerUpgradedCallback=n.registerUpgradedCallback,n.register=n.register,n.downgradeElements=n.downgradeElements,window.componentHandler=n,window.componentHandler=n,window.addEventListener("load",function(){"classList"in document.createElement("div")&&"querySelector"in document&&"addEventListener"in window&&Array.prototype.forEach?(document.documentElement.classList.add("mdl-js"),n.upgradeAllRegistered()):(n.upgradeElement=function(){},n.register=function(){})}),Date.now||(Date.now=function(){return(new Date).getTime()},Date.now=Date.now);for(var s=["webkit","moz"],i=0;i<s.length&&!window.requestAnimationFrame;++i){var r=s[i];window.requestAnimationFrame=window[r+"RequestAnimationFrame"],window.cancelAnimationFrame=window[r+"CancelAnimationFrame"]||window[r+"CancelRequestAnimationFrame"],window.requestAnimationFrame=window.requestAnimationFrame,window.cancelAnimationFrame=window.cancelAnimationFrame}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var o=0;window.requestAnimationFrame=function(e){var t=Date.now(),n=Math.max(o+16,t);return setTimeout(function(){e(o=n)},n-t)},window.cancelAnimationFrame=clearTimeout,window.requestAnimationFrame=window.requestAnimationFrame,window.cancelAnimationFrame=window.cancelAnimationFrame}var a=function(e){this.element_=e,this.init()};window.MaterialButton=a,a.prototype.Constant_={},a.prototype.CssClasses_={RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_CONTAINER:"mdl-button__ripple-container",RIPPLE:"mdl-ripple"},a.prototype.blurHandler_=function(e){e&&this.element_.blur()},a.prototype.disable=function(){this.element_.disabled=!0},a.prototype.disable=a.prototype.disable,a.prototype.enable=function(){this.element_.disabled=!1},a.prototype.enable=a.prototype.enable,a.prototype.init=function(){if(this.element_){if(this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){var e=document.createElement("span");e.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleElement_=document.createElement("span"),this.rippleElement_.classList.add(this.CssClasses_.RIPPLE),e.appendChild(this.rippleElement_),this.boundRippleBlurHandler=this.blurHandler_.bind(this),this.rippleElement_.addEventListener("mouseup",this.boundRippleBlurHandler),this.element_.appendChild(e)}this.boundButtonBlurHandler=this.blurHandler_.bind(this),this.element_.addEventListener("mouseup",this.boundButtonBlurHandler),this.element_.addEventListener("mouseleave",this.boundButtonBlurHandler)}},n.register({constructor:a,classAsString:"MaterialButton",cssClass:"mdl-js-button",widget:!0});var l=function(e){this.element_=e,this.init()};window.MaterialCheckbox=l,l.prototype.Constant_={TINY_TIMEOUT:.001},l.prototype.CssClasses_={INPUT:"mdl-checkbox__input",BOX_OUTLINE:"mdl-checkbox__box-outline",FOCUS_HELPER:"mdl-checkbox__focus-helper",TICK_OUTLINE:"mdl-checkbox__tick-outline",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-checkbox__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked",IS_UPGRADED:"is-upgraded"},l.prototype.onChange_=function(e){this.updateClasses_()},l.prototype.onFocus_=function(e){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},l.prototype.onBlur_=function(e){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},l.prototype.onMouseUp_=function(e){this.blur_()},l.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},l.prototype.blur_=function(){window.setTimeout(function(){this.inputElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},l.prototype.checkToggleState=function(){this.inputElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},l.prototype.checkToggleState=l.prototype.checkToggleState,l.prototype.checkDisabled=function(){this.inputElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},l.prototype.checkDisabled=l.prototype.checkDisabled,l.prototype.disable=function(){this.inputElement_.disabled=!0,this.updateClasses_()},l.prototype.disable=l.prototype.disable,l.prototype.enable=function(){this.inputElement_.disabled=!1,this.updateClasses_()},l.prototype.enable=l.prototype.enable,l.prototype.check=function(){this.inputElement_.checked=!0,this.updateClasses_()},l.prototype.check=l.prototype.check,l.prototype.uncheck=function(){this.inputElement_.checked=!1,this.updateClasses_()},l.prototype.uncheck=l.prototype.uncheck,l.prototype.init=function(){if(this.element_){this.inputElement_=this.element_.querySelector("."+this.CssClasses_.INPUT);var e=document.createElement("span");e.classList.add(this.CssClasses_.BOX_OUTLINE);var t=document.createElement("span");t.classList.add(this.CssClasses_.FOCUS_HELPER);var n=document.createElement("span");if(n.classList.add(this.CssClasses_.TICK_OUTLINE),e.appendChild(n),this.element_.appendChild(t),this.element_.appendChild(e),this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),this.rippleContainerElement_=document.createElement("span"),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER),this.boundRippleMouseUp=this.onMouseUp_.bind(this),this.rippleContainerElement_.addEventListener("mouseup",this.boundRippleMouseUp);var s=document.createElement("span");s.classList.add(this.CssClasses_.RIPPLE),this.rippleContainerElement_.appendChild(s),this.element_.appendChild(this.rippleContainerElement_)}this.boundInputOnChange=this.onChange_.bind(this),this.boundInputOnFocus=this.onFocus_.bind(this),this.boundInputOnBlur=this.onBlur_.bind(this),this.boundElementMouseUp=this.onMouseUp_.bind(this),this.inputElement_.addEventListener("change",this.boundInputOnChange),this.inputElement_.addEventListener("focus",this.boundInputOnFocus),this.inputElement_.addEventListener("blur",this.boundInputOnBlur),this.element_.addEventListener("mouseup",this.boundElementMouseUp),this.updateClasses_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},n.register({constructor:l,classAsString:"MaterialCheckbox",cssClass:"mdl-js-checkbox",widget:!0});var c=function(e){this.element_=e,this.init()};window.MaterialIconToggle=c,c.prototype.Constant_={TINY_TIMEOUT:.001},c.prototype.CssClasses_={INPUT:"mdl-icon-toggle__input",JS_RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-icon-toggle__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked"},c.prototype.onChange_=function(e){this.updateClasses_()},c.prototype.onFocus_=function(e){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},c.prototype.onBlur_=function(e){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},c.prototype.onMouseUp_=function(e){this.blur_()},c.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},c.prototype.blur_=function(){window.setTimeout(function(){this.inputElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},c.prototype.checkToggleState=function(){this.inputElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},c.prototype.checkToggleState=c.prototype.checkToggleState,c.prototype.checkDisabled=function(){this.inputElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},c.prototype.checkDisabled=c.prototype.checkDisabled,c.prototype.disable=function(){this.inputElement_.disabled=!0,this.updateClasses_()},c.prototype.disable=c.prototype.disable,c.prototype.enable=function(){this.inputElement_.disabled=!1,this.updateClasses_()},c.prototype.enable=c.prototype.enable,c.prototype.check=function(){this.inputElement_.checked=!0,this.updateClasses_()},c.prototype.check=c.prototype.check,c.prototype.uncheck=function(){this.inputElement_.checked=!1,this.updateClasses_()},c.prototype.uncheck=c.prototype.uncheck,c.prototype.init=function(){if(this.element_){if(this.inputElement_=this.element_.querySelector("."+this.CssClasses_.INPUT),this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),this.rippleContainerElement_=document.createElement("span"),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER),this.boundRippleMouseUp=this.onMouseUp_.bind(this),this.rippleContainerElement_.addEventListener("mouseup",this.boundRippleMouseUp);var e=document.createElement("span");e.classList.add(this.CssClasses_.RIPPLE),this.rippleContainerElement_.appendChild(e),this.element_.appendChild(this.rippleContainerElement_)}this.boundInputOnChange=this.onChange_.bind(this),this.boundInputOnFocus=this.onFocus_.bind(this),this.boundInputOnBlur=this.onBlur_.bind(this),this.boundElementOnMouseUp=this.onMouseUp_.bind(this),this.inputElement_.addEventListener("change",this.boundInputOnChange),this.inputElement_.addEventListener("focus",this.boundInputOnFocus),this.inputElement_.addEventListener("blur",this.boundInputOnBlur),this.element_.addEventListener("mouseup",this.boundElementOnMouseUp),this.updateClasses_(),this.element_.classList.add("is-upgraded")}},n.register({constructor:c,classAsString:"MaterialIconToggle",cssClass:"mdl-js-icon-toggle",widget:!0});var u=function(e){this.element_=e,this.init()};window.MaterialMenu=u,u.prototype.Constant_={TRANSITION_DURATION_SECONDS:.3,TRANSITION_DURATION_FRACTION:.8,CLOSE_TIMEOUT:150},u.prototype.Keycodes_={ENTER:13,ESCAPE:27,SPACE:32,UP_ARROW:38,DOWN_ARROW:40},u.prototype.CssClasses_={CONTAINER:"mdl-menu__container",OUTLINE:"mdl-menu__outline",ITEM:"mdl-menu__item",ITEM_RIPPLE_CONTAINER:"mdl-menu__item-ripple-container",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE:"mdl-ripple",IS_UPGRADED:"is-upgraded",IS_VISIBLE:"is-visible",IS_ANIMATING:"is-animating",BOTTOM_LEFT:"mdl-menu--bottom-left",BOTTOM_RIGHT:"mdl-menu--bottom-right",TOP_LEFT:"mdl-menu--top-left",TOP_RIGHT:"mdl-menu--top-right",UNALIGNED:"mdl-menu--unaligned"},u.prototype.init=function(){if(this.element_){var e=document.createElement("div");e.classList.add(this.CssClasses_.CONTAINER),this.element_.parentElement.insertBefore(e,this.element_),this.element_.parentElement.removeChild(this.element_),e.appendChild(this.element_),this.container_=e;var t=document.createElement("div");t.classList.add(this.CssClasses_.OUTLINE),this.outline_=t,e.insertBefore(t,this.element_);var n=this.element_.getAttribute("for")||this.element_.getAttribute("data-mdl-for"),s=null;n&&((s=document.getElementById(n))&&(this.forElement_=s,s.addEventListener("click",this.handleForClick_.bind(this)),s.addEventListener("keydown",this.handleForKeyboardEvent_.bind(this))));var i=this.element_.querySelectorAll("."+this.CssClasses_.ITEM);this.boundItemKeydown_=this.handleItemKeyboardEvent_.bind(this),this.boundItemClick_=this.handleItemClick_.bind(this);for(var r=0;r<i.length;r++)i[r].addEventListener("click",this.boundItemClick_),i[r].tabIndex="-1",i[r].addEventListener("keydown",this.boundItemKeydown_);if(this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT))for(this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),r=0;r<i.length;r++){var o=i[r],a=document.createElement("span");a.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);var l=document.createElement("span");l.classList.add(this.CssClasses_.RIPPLE),a.appendChild(l),o.appendChild(a),o.classList.add(this.CssClasses_.RIPPLE_EFFECT)}this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)&&this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT),this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)&&this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT),this.element_.classList.contains(this.CssClasses_.TOP_LEFT)&&this.outline_.classList.add(this.CssClasses_.TOP_LEFT),this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)&&this.outline_.classList.add(this.CssClasses_.TOP_RIGHT),this.element_.classList.contains(this.CssClasses_.UNALIGNED)&&this.outline_.classList.add(this.CssClasses_.UNALIGNED),e.classList.add(this.CssClasses_.IS_UPGRADED)}},u.prototype.handleForClick_=function(e){if(this.element_&&this.forElement_){var t=this.forElement_.getBoundingClientRect(),n=this.forElement_.parentElement.getBoundingClientRect();this.element_.classList.contains(this.CssClasses_.UNALIGNED)||(this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)?(this.container_.style.right=n.right-t.right+"px",this.container_.style.top=this.forElement_.offsetTop+this.forElement_.offsetHeight+"px"):this.element_.classList.contains(this.CssClasses_.TOP_LEFT)?(this.container_.style.left=this.forElement_.offsetLeft+"px",this.container_.style.bottom=n.bottom-t.top+"px"):this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)?(this.container_.style.right=n.right-t.right+"px",this.container_.style.bottom=n.bottom-t.top+"px"):(this.container_.style.left=this.forElement_.offsetLeft+"px",this.container_.style.top=this.forElement_.offsetTop+this.forElement_.offsetHeight+"px"))}this.toggle(e)},u.prototype.handleForKeyboardEvent_=function(e){if(this.element_&&this.container_&&this.forElement_){var t=this.element_.querySelectorAll("."+this.CssClasses_.ITEM+":not([disabled])");t&&t.length>0&&this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)&&(e.keyCode===this.Keycodes_.UP_ARROW?(e.preventDefault(),t[t.length-1].focus()):e.keyCode===this.Keycodes_.DOWN_ARROW&&(e.preventDefault(),t[0].focus()))}},u.prototype.handleItemKeyboardEvent_=function(e){if(this.element_&&this.container_){var t=this.element_.querySelectorAll("."+this.CssClasses_.ITEM+":not([disabled])");if(t&&t.length>0&&this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)){var n=Array.prototype.slice.call(t).indexOf(e.target);if(e.keyCode===this.Keycodes_.UP_ARROW)e.preventDefault(),n>0?t[n-1].focus():t[t.length-1].focus();else if(e.keyCode===this.Keycodes_.DOWN_ARROW)e.preventDefault(),t.length>n+1?t[n+1].focus():t[0].focus();else if(e.keyCode===this.Keycodes_.SPACE||e.keyCode===this.Keycodes_.ENTER){e.preventDefault();var s=new MouseEvent("mousedown");e.target.dispatchEvent(s),s=new MouseEvent("mouseup"),e.target.dispatchEvent(s),e.target.click()}else e.keyCode===this.Keycodes_.ESCAPE&&(e.preventDefault(),this.hide())}}},u.prototype.handleItemClick_=function(e){e.target.hasAttribute("disabled")?e.stopPropagation():(this.closing_=!0,window.setTimeout(function(e){this.hide(),this.closing_=!1}.bind(this),this.Constant_.CLOSE_TIMEOUT))},u.prototype.applyClip_=function(e,t){this.element_.classList.contains(this.CssClasses_.UNALIGNED)?this.element_.style.clip="":this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)?this.element_.style.clip="rect(0 "+t+"px 0 "+t+"px)":this.element_.classList.contains(this.CssClasses_.TOP_LEFT)?this.element_.style.clip="rect("+e+"px 0 "+e+"px 0)":this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)?this.element_.style.clip="rect("+e+"px "+t+"px "+e+"px "+t+"px)":this.element_.style.clip=""},u.prototype.removeAnimationEndListener_=function(e){e.target.classList.remove(u.prototype.CssClasses_.IS_ANIMATING)},u.prototype.addAnimationEndListener_=function(){this.element_.addEventListener("transitionend",this.removeAnimationEndListener_),this.element_.addEventListener("webkitTransitionEnd",this.removeAnimationEndListener_)},u.prototype.show=function(e){if(this.element_&&this.container_&&this.outline_){var t=this.element_.getBoundingClientRect().height,n=this.element_.getBoundingClientRect().width;this.container_.style.width=n+"px",this.container_.style.height=t+"px",this.outline_.style.width=n+"px",this.outline_.style.height=t+"px";for(var s=this.Constant_.TRANSITION_DURATION_SECONDS*this.Constant_.TRANSITION_DURATION_FRACTION,i=this.element_.querySelectorAll("."+this.CssClasses_.ITEM),r=0;r<i.length;r++){var o;o=this.element_.classList.contains(this.CssClasses_.TOP_LEFT)||this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)?(t-i[r].offsetTop-i[r].offsetHeight)/t*s+"s":i[r].offsetTop/t*s+"s",i[r].style.transitionDelay=o}this.applyClip_(t,n),window.requestAnimationFrame(function(){this.element_.classList.add(this.CssClasses_.IS_ANIMATING),this.element_.style.clip="rect(0 "+n+"px "+t+"px 0)",this.container_.classList.add(this.CssClasses_.IS_VISIBLE)}.bind(this)),this.addAnimationEndListener_();var a=function(t){t===e||this.closing_||t.target.parentNode===this.element_||(document.removeEventListener("click",a),this.hide())}.bind(this);document.addEventListener("click",a)}},u.prototype.show=u.prototype.show,u.prototype.hide=function(){if(this.element_&&this.container_&&this.outline_){for(var e=this.element_.querySelectorAll("."+this.CssClasses_.ITEM),t=0;t<e.length;t++)e[t].style.removeProperty("transition-delay");var n=this.element_.getBoundingClientRect(),s=n.height,i=n.width;this.element_.classList.add(this.CssClasses_.IS_ANIMATING),this.applyClip_(s,i),this.container_.classList.remove(this.CssClasses_.IS_VISIBLE),this.addAnimationEndListener_()}},u.prototype.hide=u.prototype.hide,u.prototype.toggle=function(e){this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)?this.hide():this.show(e)},u.prototype.toggle=u.prototype.toggle,n.register({constructor:u,classAsString:"MaterialMenu",cssClass:"mdl-js-menu",widget:!0});var d=function(e){this.element_=e,this.init()};window.MaterialProgress=d,d.prototype.Constant_={},d.prototype.CssClasses_={INDETERMINATE_CLASS:"mdl-progress__indeterminate"},d.prototype.setProgress=function(e){this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)||(this.progressbar_.style.width=e+"%")},d.prototype.setProgress=d.prototype.setProgress,d.prototype.setBuffer=function(e){this.bufferbar_.style.width=e+"%",this.auxbar_.style.width=100-e+"%"},d.prototype.setBuffer=d.prototype.setBuffer,d.prototype.init=function(){if(this.element_){var e=document.createElement("div");e.className="progressbar bar bar1",this.element_.appendChild(e),this.progressbar_=e,(e=document.createElement("div")).className="bufferbar bar bar2",this.element_.appendChild(e),this.bufferbar_=e,(e=document.createElement("div")).className="auxbar bar bar3",this.element_.appendChild(e),this.auxbar_=e,this.progressbar_.style.width="0%",this.bufferbar_.style.width="100%",this.auxbar_.style.width="0%",this.element_.classList.add("is-upgraded")}},n.register({constructor:d,classAsString:"MaterialProgress",cssClass:"mdl-js-progress",widget:!0});var h=function(e){this.element_=e,this.init()};window.MaterialRadio=h,h.prototype.Constant_={TINY_TIMEOUT:.001},h.prototype.CssClasses_={IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked",IS_UPGRADED:"is-upgraded",JS_RADIO:"mdl-js-radio",RADIO_BTN:"mdl-radio__button",RADIO_OUTER_CIRCLE:"mdl-radio__outer-circle",RADIO_INNER_CIRCLE:"mdl-radio__inner-circle",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-radio__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple"},h.prototype.onChange_=function(e){for(var t=document.getElementsByClassName(this.CssClasses_.JS_RADIO),n=0;n<t.length;n++){t[n].querySelector("."+this.CssClasses_.RADIO_BTN).getAttribute("name")===this.btnElement_.getAttribute("name")&&void 0!==t[n].MaterialRadio&&t[n].MaterialRadio.updateClasses_()}},h.prototype.onFocus_=function(e){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},h.prototype.onBlur_=function(e){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},h.prototype.onMouseup_=function(e){this.blur_()},h.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},h.prototype.blur_=function(){window.setTimeout(function(){this.btnElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},h.prototype.checkDisabled=function(){this.btnElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},h.prototype.checkDisabled=h.prototype.checkDisabled,h.prototype.checkToggleState=function(){this.btnElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},h.prototype.checkToggleState=h.prototype.checkToggleState,h.prototype.disable=function(){this.btnElement_.disabled=!0,this.updateClasses_()},h.prototype.disable=h.prototype.disable,h.prototype.enable=function(){this.btnElement_.disabled=!1,this.updateClasses_()},h.prototype.enable=h.prototype.enable,h.prototype.check=function(){this.btnElement_.checked=!0,this.onChange_(null)},h.prototype.check=h.prototype.check,h.prototype.uncheck=function(){this.btnElement_.checked=!1,this.onChange_(null)},h.prototype.uncheck=h.prototype.uncheck,h.prototype.init=function(){if(this.element_){this.btnElement_=this.element_.querySelector("."+this.CssClasses_.RADIO_BTN),this.boundChangeHandler_=this.onChange_.bind(this),this.boundFocusHandler_=this.onChange_.bind(this),this.boundBlurHandler_=this.onBlur_.bind(this),this.boundMouseUpHandler_=this.onMouseup_.bind(this);var e=document.createElement("span");e.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);var t,n=document.createElement("span");if(n.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE),this.element_.appendChild(e),this.element_.appendChild(n),this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),(t=document.createElement("span")).classList.add(this.CssClasses_.RIPPLE_CONTAINER),t.classList.add(this.CssClasses_.RIPPLE_EFFECT),t.classList.add(this.CssClasses_.RIPPLE_CENTER),t.addEventListener("mouseup",this.boundMouseUpHandler_);var s=document.createElement("span");s.classList.add(this.CssClasses_.RIPPLE),t.appendChild(s),this.element_.appendChild(t)}this.btnElement_.addEventListener("change",this.boundChangeHandler_),this.btnElement_.addEventListener("focus",this.boundFocusHandler_),this.btnElement_.addEventListener("blur",this.boundBlurHandler_),this.element_.addEventListener("mouseup",this.boundMouseUpHandler_),this.updateClasses_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},n.register({constructor:h,classAsString:"MaterialRadio",cssClass:"mdl-js-radio",widget:!0});var p=function(e){this.element_=e,this.isIE_=window.navigator.msPointerEnabled,this.init()};window.MaterialSlider=p,p.prototype.Constant_={},p.prototype.CssClasses_={IE_CONTAINER:"mdl-slider__ie-container",SLIDER_CONTAINER:"mdl-slider__container",BACKGROUND_FLEX:"mdl-slider__background-flex",BACKGROUND_LOWER:"mdl-slider__background-lower",BACKGROUND_UPPER:"mdl-slider__background-upper",IS_LOWEST_VALUE:"is-lowest-value",IS_UPGRADED:"is-upgraded"},p.prototype.onInput_=function(e){this.updateValueStyles_()},p.prototype.onChange_=function(e){this.updateValueStyles_()},p.prototype.onMouseUp_=function(e){e.target.blur()},p.prototype.onContainerMouseDown_=function(e){if(e.target===this.element_.parentElement){e.preventDefault();var t=new MouseEvent("mousedown",{target:e.target,buttons:e.buttons,clientX:e.clientX,clientY:this.element_.getBoundingClientRect().y});this.element_.dispatchEvent(t)}},p.prototype.updateValueStyles_=function(){var e=(this.element_.value-this.element_.min)/(this.element_.max-this.element_.min);0===e?this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE):this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE),this.isIE_||(this.backgroundLower_.style.flex=e,this.backgroundLower_.style.webkitFlex=e,this.backgroundUpper_.style.flex=1-e,this.backgroundUpper_.style.webkitFlex=1-e)},p.prototype.disable=function(){this.element_.disabled=!0},p.prototype.disable=p.prototype.disable,p.prototype.enable=function(){this.element_.disabled=!1},p.prototype.enable=p.prototype.enable,p.prototype.change=function(e){void 0!==e&&(this.element_.value=e),this.updateValueStyles_()},p.prototype.change=p.prototype.change,p.prototype.init=function(){if(this.element_){if(this.isIE_){var e=document.createElement("div");e.classList.add(this.CssClasses_.IE_CONTAINER),this.element_.parentElement.insertBefore(e,this.element_),this.element_.parentElement.removeChild(this.element_),e.appendChild(this.element_)}else{var t=document.createElement("div");t.classList.add(this.CssClasses_.SLIDER_CONTAINER),this.element_.parentElement.insertBefore(t,this.element_),this.element_.parentElement.removeChild(this.element_),t.appendChild(this.element_);var n=document.createElement("div");n.classList.add(this.CssClasses_.BACKGROUND_FLEX),t.appendChild(n),this.backgroundLower_=document.createElement("div"),this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER),n.appendChild(this.backgroundLower_),this.backgroundUpper_=document.createElement("div"),this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER),n.appendChild(this.backgroundUpper_)}this.boundInputHandler=this.onInput_.bind(this),this.boundChangeHandler=this.onChange_.bind(this),this.boundMouseUpHandler=this.onMouseUp_.bind(this),this.boundContainerMouseDownHandler=this.onContainerMouseDown_.bind(this),this.element_.addEventListener("input",this.boundInputHandler),this.element_.addEventListener("change",this.boundChangeHandler),this.element_.addEventListener("mouseup",this.boundMouseUpHandler),this.element_.parentElement.addEventListener("mousedown",this.boundContainerMouseDownHandler),this.updateValueStyles_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},n.register({constructor:p,classAsString:"MaterialSlider",cssClass:"mdl-js-slider",widget:!0});var f=function(e){if(this.element_=e,this.textElement_=this.element_.querySelector("."+this.cssClasses_.MESSAGE),this.actionElement_=this.element_.querySelector("."+this.cssClasses_.ACTION),!this.textElement_)throw new Error("There must be a message element for a snackbar.");if(!this.actionElement_)throw new Error("There must be an action element for a snackbar.");this.active=!1,this.actionHandler_=void 0,this.message_=void 0,this.actionText_=void 0,this.queuedNotifications_=[],this.setActionHidden_(!0)};window.MaterialSnackbar=f,f.prototype.Constant_={ANIMATION_LENGTH:250},f.prototype.cssClasses_={SNACKBAR:"mdl-snackbar",MESSAGE:"mdl-snackbar__text",ACTION:"mdl-snackbar__action",ACTIVE:"mdl-snackbar--active"},f.prototype.displaySnackbar_=function(){this.element_.setAttribute("aria-hidden","true"),this.actionHandler_&&(this.actionElement_.textContent=this.actionText_,this.actionElement_.addEventListener("click",this.actionHandler_),this.setActionHidden_(!1)),this.textElement_.textContent=this.message_,this.element_.classList.add(this.cssClasses_.ACTIVE),this.element_.setAttribute("aria-hidden","false"),setTimeout(this.cleanup_.bind(this),this.timeout_)},f.prototype.showSnackbar=function(e){if(void 0===e)throw new Error("Please provide a data object with at least a message to display.");if(void 0===e.message)throw new Error("Please provide a message to be displayed.");if(e.actionHandler&&!e.actionText)throw new Error("Please provide action text with the handler.");this.active?this.queuedNotifications_.push(e):(this.active=!0,this.message_=e.message,e.timeout?this.timeout_=e.timeout:this.timeout_=2750,e.actionHandler&&(this.actionHandler_=e.actionHandler),e.actionText&&(this.actionText_=e.actionText),this.displaySnackbar_())},f.prototype.showSnackbar=f.prototype.showSnackbar,f.prototype.checkQueue_=function(){this.queuedNotifications_.length>0&&this.showSnackbar(this.queuedNotifications_.shift())},f.prototype.cleanup_=function(){this.element_.classList.remove(this.cssClasses_.ACTIVE),setTimeout(function(){this.element_.setAttribute("aria-hidden","true"),this.textElement_.textContent="",Boolean(this.actionElement_.getAttribute("aria-hidden"))||(this.setActionHidden_(!0),this.actionElement_.textContent="",this.actionElement_.removeEventListener("click",this.actionHandler_)),this.actionHandler_=void 0,this.message_=void 0,this.actionText_=void 0,this.active=!1,this.checkQueue_()}.bind(this),this.Constant_.ANIMATION_LENGTH)},f.prototype.setActionHidden_=function(e){e?this.actionElement_.setAttribute("aria-hidden","true"):this.actionElement_.removeAttribute("aria-hidden")},n.register({constructor:f,classAsString:"MaterialSnackbar",cssClass:"mdl-js-snackbar",widget:!0});var _=function(e){this.element_=e,this.init()};window.MaterialSpinner=_,_.prototype.Constant_={MDL_SPINNER_LAYER_COUNT:4},_.prototype.CssClasses_={MDL_SPINNER_LAYER:"mdl-spinner__layer",MDL_SPINNER_CIRCLE_CLIPPER:"mdl-spinner__circle-clipper",MDL_SPINNER_CIRCLE:"mdl-spinner__circle",MDL_SPINNER_GAP_PATCH:"mdl-spinner__gap-patch",MDL_SPINNER_LEFT:"mdl-spinner__left",MDL_SPINNER_RIGHT:"mdl-spinner__right"},_.prototype.createLayer=function(e){var t=document.createElement("div");t.classList.add(this.CssClasses_.MDL_SPINNER_LAYER),t.classList.add(this.CssClasses_.MDL_SPINNER_LAYER+"-"+e);var n=document.createElement("div");n.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER),n.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);var s=document.createElement("div");s.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);var i=document.createElement("div");i.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER),i.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);for(var r=[n,s,i],o=0;o<r.length;o++){var a=document.createElement("div");a.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE),r[o].appendChild(a)}t.appendChild(n),t.appendChild(s),t.appendChild(i),this.element_.appendChild(t)},_.prototype.createLayer=_.prototype.createLayer,_.prototype.stop=function(){this.element_.classList.remove("is-active")},_.prototype.stop=_.prototype.stop,_.prototype.start=function(){this.element_.classList.add("is-active")},_.prototype.start=_.prototype.start,_.prototype.init=function(){if(this.element_){for(var e=1;e<=this.Constant_.MDL_SPINNER_LAYER_COUNT;e++)this.createLayer(e);this.element_.classList.add("is-upgraded")}},n.register({constructor:_,classAsString:"MaterialSpinner",cssClass:"mdl-js-spinner",widget:!0});var m=function(e){this.element_=e,this.init()};window.MaterialSwitch=m,m.prototype.Constant_={TINY_TIMEOUT:.001},m.prototype.CssClasses_={INPUT:"mdl-switch__input",TRACK:"mdl-switch__track",THUMB:"mdl-switch__thumb",FOCUS_HELPER:"mdl-switch__focus-helper",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-switch__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked"},m.prototype.onChange_=function(e){this.updateClasses_()},m.prototype.onFocus_=function(e){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},m.prototype.onBlur_=function(e){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},m.prototype.onMouseUp_=function(e){this.blur_()},m.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},m.prototype.blur_=function(){window.setTimeout(function(){this.inputElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},m.prototype.checkDisabled=function(){this.inputElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},m.prototype.checkDisabled=m.prototype.checkDisabled,m.prototype.checkToggleState=function(){this.inputElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},m.prototype.checkToggleState=m.prototype.checkToggleState,m.prototype.disable=function(){this.inputElement_.disabled=!0,this.updateClasses_()},m.prototype.disable=m.prototype.disable,m.prototype.enable=function(){this.inputElement_.disabled=!1,this.updateClasses_()},m.prototype.enable=m.prototype.enable,m.prototype.on=function(){this.inputElement_.checked=!0,this.updateClasses_()},m.prototype.on=m.prototype.on,m.prototype.off=function(){this.inputElement_.checked=!1,this.updateClasses_()},m.prototype.off=m.prototype.off,m.prototype.init=function(){if(this.element_){this.inputElement_=this.element_.querySelector("."+this.CssClasses_.INPUT);var e=document.createElement("div");e.classList.add(this.CssClasses_.TRACK);var t=document.createElement("div");t.classList.add(this.CssClasses_.THUMB);var n=document.createElement("span");if(n.classList.add(this.CssClasses_.FOCUS_HELPER),t.appendChild(n),this.element_.appendChild(e),this.element_.appendChild(t),this.boundMouseUpHandler=this.onMouseUp_.bind(this),this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),this.rippleContainerElement_=document.createElement("span"),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER),this.rippleContainerElement_.addEventListener("mouseup",this.boundMouseUpHandler);var s=document.createElement("span");s.classList.add(this.CssClasses_.RIPPLE),this.rippleContainerElement_.appendChild(s),this.element_.appendChild(this.rippleContainerElement_)}this.boundChangeHandler=this.onChange_.bind(this),this.boundFocusHandler=this.onFocus_.bind(this),this.boundBlurHandler=this.onBlur_.bind(this),this.inputElement_.addEventListener("change",this.boundChangeHandler),this.inputElement_.addEventListener("focus",this.boundFocusHandler),this.inputElement_.addEventListener("blur",this.boundBlurHandler),this.element_.addEventListener("mouseup",this.boundMouseUpHandler),this.updateClasses_(),this.element_.classList.add("is-upgraded")}},n.register({constructor:m,classAsString:"MaterialSwitch",cssClass:"mdl-js-switch",widget:!0});var v=function(e){this.element_=e,this.init()};window.MaterialTabs=v,v.prototype.Constant_={},v.prototype.CssClasses_={TAB_CLASS:"mdl-tabs__tab",PANEL_CLASS:"mdl-tabs__panel",ACTIVE_CLASS:"is-active",UPGRADED_CLASS:"is-upgraded",MDL_JS_RIPPLE_EFFECT:"mdl-js-ripple-effect",MDL_RIPPLE_CONTAINER:"mdl-tabs__ripple-container",MDL_RIPPLE:"mdl-ripple",MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events"},v.prototype.initTabs_=function(){this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)&&this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS),this.tabs_=this.element_.querySelectorAll("."+this.CssClasses_.TAB_CLASS),this.panels_=this.element_.querySelectorAll("."+this.CssClasses_.PANEL_CLASS);for(var t=0;t<this.tabs_.length;t++)new e(this.tabs_[t],this);this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS)},v.prototype.resetTabState_=function(){for(var e=0;e<this.tabs_.length;e++)this.tabs_[e].classList.remove(this.CssClasses_.ACTIVE_CLASS)},v.prototype.resetPanelState_=function(){for(var e=0;e<this.panels_.length;e++)this.panels_[e].classList.remove(this.CssClasses_.ACTIVE_CLASS)},v.prototype.init=function(){this.element_&&this.initTabs_()},n.register({constructor:v,classAsString:"MaterialTabs",cssClass:"mdl-js-tabs"});var E=function(e){this.element_=e,this.maxRows=this.Constant_.NO_MAX_ROWS,this.init()};window.MaterialTextfield=E,E.prototype.Constant_={NO_MAX_ROWS:-1,MAX_ROWS_ATTRIBUTE:"maxrows"},E.prototype.CssClasses_={LABEL:"mdl-textfield__label",INPUT:"mdl-textfield__input",IS_DIRTY:"is-dirty",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_INVALID:"is-invalid",IS_UPGRADED:"is-upgraded",HAS_PLACEHOLDER:"has-placeholder"},E.prototype.onKeyDown_=function(e){var t=e.target.value.split("\n").length;13===e.keyCode&&t>=this.maxRows&&e.preventDefault()},E.prototype.onFocus_=function(e){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},E.prototype.onBlur_=function(e){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},E.prototype.onReset_=function(e){this.updateClasses_()},E.prototype.updateClasses_=function(){this.checkDisabled(),this.checkValidity(),this.checkDirty(),this.checkFocus()},E.prototype.checkDisabled=function(){this.input_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},E.prototype.checkDisabled=E.prototype.checkDisabled,E.prototype.checkFocus=function(){Boolean(this.element_.querySelector(":focus"))?this.element_.classList.add(this.CssClasses_.IS_FOCUSED):this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},E.prototype.checkFocus=E.prototype.checkFocus,E.prototype.checkValidity=function(){this.input_.validity&&(this.input_.validity.valid?this.element_.classList.remove(this.CssClasses_.IS_INVALID):this.element_.classList.add(this.CssClasses_.IS_INVALID))},E.prototype.checkValidity=E.prototype.checkValidity,E.prototype.checkDirty=function(){this.input_.value&&this.input_.value.length>0?this.element_.classList.add(this.CssClasses_.IS_DIRTY):this.element_.classList.remove(this.CssClasses_.IS_DIRTY)},E.prototype.checkDirty=E.prototype.checkDirty,E.prototype.disable=function(){this.input_.disabled=!0,this.updateClasses_()},E.prototype.disable=E.prototype.disable,E.prototype.enable=function(){this.input_.disabled=!1,this.updateClasses_()},E.prototype.enable=E.prototype.enable,E.prototype.change=function(e){this.input_.value=e||"",this.updateClasses_()},E.prototype.change=E.prototype.change,E.prototype.init=function(){if(this.element_&&(this.label_=this.element_.querySelector("."+this.CssClasses_.LABEL),this.input_=this.element_.querySelector("."+this.CssClasses_.INPUT),this.input_)){this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)&&(this.maxRows=parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE),10),isNaN(this.maxRows)&&(this.maxRows=this.Constant_.NO_MAX_ROWS)),this.input_.hasAttribute("placeholder")&&this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER),this.boundUpdateClassesHandler=this.updateClasses_.bind(this),this.boundFocusHandler=this.onFocus_.bind(this),this.boundBlurHandler=this.onBlur_.bind(this),this.boundResetHandler=this.onReset_.bind(this),this.input_.addEventListener("input",this.boundUpdateClassesHandler),this.input_.addEventListener("focus",this.boundFocusHandler),this.input_.addEventListener("blur",this.boundBlurHandler),this.input_.addEventListener("reset",this.boundResetHandler),this.maxRows!==this.Constant_.NO_MAX_ROWS&&(this.boundKeyDownHandler=this.onKeyDown_.bind(this),this.input_.addEventListener("keydown",this.boundKeyDownHandler));var e=this.element_.classList.contains(this.CssClasses_.IS_INVALID);this.updateClasses_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED),e&&this.element_.classList.add(this.CssClasses_.IS_INVALID),this.input_.hasAttribute("autofocus")&&(this.element_.focus(),this.checkFocus())}},n.register({constructor:E,classAsString:"MaterialTextfield",cssClass:"mdl-js-textfield",widget:!0});var y=function(e){this.element_=e,this.init()};window.MaterialTooltip=y,y.prototype.Constant_={},y.prototype.CssClasses_={IS_ACTIVE:"is-active",BOTTOM:"mdl-tooltip--bottom",LEFT:"mdl-tooltip--left",RIGHT:"mdl-tooltip--right",TOP:"mdl-tooltip--top"},y.prototype.handleMouseEnter_=function(e){var t=e.target.getBoundingClientRect(),n=t.left+t.width/2,s=t.top+t.height/2,i=this.element_.offsetWidth/2*-1,r=this.element_.offsetHeight/2*-1;this.element_.classList.contains(this.CssClasses_.LEFT)||this.element_.classList.contains(this.CssClasses_.RIGHT)?(n=t.width/2,s+r<0?(this.element_.style.top="0",this.element_.style.marginTop="0"):(this.element_.style.top=s+"px",this.element_.style.marginTop=r+"px")):n+i<0?(this.element_.style.left="0",this.element_.style.marginLeft="0"):(this.element_.style.left=n+"px",this.element_.style.marginLeft=i+"px"),this.element_.classList.contains(this.CssClasses_.TOP)?this.element_.style.top=t.top-this.element_.offsetHeight-10+"px":this.element_.classList.contains(this.CssClasses_.RIGHT)?this.element_.style.left=t.left+t.width+10+"px":this.element_.classList.contains(this.CssClasses_.LEFT)?this.element_.style.left=t.left-this.element_.offsetWidth-10+"px":this.element_.style.top=t.top+t.height+10+"px",this.element_.classList.add(this.CssClasses_.IS_ACTIVE)},y.prototype.hideTooltip_=function(){this.element_.classList.remove(this.CssClasses_.IS_ACTIVE)},y.prototype.init=function(){if(this.element_){var e=this.element_.getAttribute("for")||this.element_.getAttribute("data-mdl-for");e&&(this.forElement_=document.getElementById(e)),this.forElement_&&(this.forElement_.hasAttribute("tabindex")||this.forElement_.setAttribute("tabindex","0"),this.boundMouseEnterHandler=this.handleMouseEnter_.bind(this),this.boundMouseLeaveAndScrollHandler=this.hideTooltip_.bind(this),this.forElement_.addEventListener("mouseenter",this.boundMouseEnterHandler,!1),this.forElement_.addEventListener("touchend",this.boundMouseEnterHandler,!1),this.forElement_.addEventListener("mouseleave",this.boundMouseLeaveAndScrollHandler,!1),window.addEventListener("scroll",this.boundMouseLeaveAndScrollHandler,!0),window.addEventListener("touchstart",this.boundMouseLeaveAndScrollHandler))}},n.register({constructor:y,classAsString:"MaterialTooltip",cssClass:"mdl-tooltip"});var C=function(e){this.element_=e,this.init()};window.MaterialLayout=C,C.prototype.Constant_={MAX_WIDTH:"(max-width: 1024px)",TAB_SCROLL_PIXELS:100,RESIZE_TIMEOUT:100,MENU_ICON:"&#xE5D2;",CHEVRON_LEFT:"chevron_left",CHEVRON_RIGHT:"chevron_right"},C.prototype.Keycodes_={ENTER:13,ESCAPE:27,SPACE:32},C.prototype.Mode_={STANDARD:0,SEAMED:1,WATERFALL:2,SCROLL:3},C.prototype.CssClasses_={CONTAINER:"mdl-layout__container",HEADER:"mdl-layout__header",DRAWER:"mdl-layout__drawer",CONTENT:"mdl-layout__content",DRAWER_BTN:"mdl-layout__drawer-button",ICON:"material-icons",JS_RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_CONTAINER:"mdl-layout__tab-ripple-container",RIPPLE:"mdl-ripple",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",HEADER_SEAMED:"mdl-layout__header--seamed",HEADER_WATERFALL:"mdl-layout__header--waterfall",HEADER_SCROLL:"mdl-layout__header--scroll",FIXED_HEADER:"mdl-layout--fixed-header",OBFUSCATOR:"mdl-layout__obfuscator",TAB_BAR:"mdl-layout__tab-bar",TAB_CONTAINER:"mdl-layout__tab-bar-container",TAB:"mdl-layout__tab",TAB_BAR_BUTTON:"mdl-layout__tab-bar-button",TAB_BAR_LEFT_BUTTON:"mdl-layout__tab-bar-left-button",TAB_BAR_RIGHT_BUTTON:"mdl-layout__tab-bar-right-button",TAB_MANUAL_SWITCH:"mdl-layout__tab-manual-switch",PANEL:"mdl-layout__tab-panel",HAS_DRAWER:"has-drawer",HAS_TABS:"has-tabs",HAS_SCROLLING_HEADER:"has-scrolling-header",CASTING_SHADOW:"is-casting-shadow",IS_COMPACT:"is-compact",IS_SMALL_SCREEN:"is-small-screen",IS_DRAWER_OPEN:"is-visible",IS_ACTIVE:"is-active",IS_UPGRADED:"is-upgraded",IS_ANIMATING:"is-animating",ON_LARGE_SCREEN:"mdl-layout--large-screen-only",ON_SMALL_SCREEN:"mdl-layout--small-screen-only"},C.prototype.contentScrollHandler_=function(){if(!this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)){var e=!this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN)||this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);this.content_.scrollTop>0&&!this.header_.classList.contains(this.CssClasses_.IS_COMPACT)?(this.header_.classList.add(this.CssClasses_.CASTING_SHADOW),this.header_.classList.add(this.CssClasses_.IS_COMPACT),e&&this.header_.classList.add(this.CssClasses_.IS_ANIMATING)):this.content_.scrollTop<=0&&this.header_.classList.contains(this.CssClasses_.IS_COMPACT)&&(this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW),this.header_.classList.remove(this.CssClasses_.IS_COMPACT),e&&this.header_.classList.add(this.CssClasses_.IS_ANIMATING))}},C.prototype.keyboardEventHandler_=function(e){e.keyCode===this.Keycodes_.ESCAPE&&this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)&&this.toggleDrawer()},C.prototype.screenSizeHandler_=function(){this.screenSizeMediaQuery_.matches?this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN):(this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN),this.drawer_&&(this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN),this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN)))},C.prototype.drawerToggleHandler_=function(e){if(e&&"keydown"===e.type){if(e.keyCode!==this.Keycodes_.SPACE&&e.keyCode!==this.Keycodes_.ENTER)return;e.preventDefault()}this.toggleDrawer()},C.prototype.headerTransitionEndHandler_=function(){this.header_.classList.remove(this.CssClasses_.IS_ANIMATING)},C.prototype.headerClickHandler_=function(){this.header_.classList.contains(this.CssClasses_.IS_COMPACT)&&(this.header_.classList.remove(this.CssClasses_.IS_COMPACT),this.header_.classList.add(this.CssClasses_.IS_ANIMATING))},C.prototype.resetTabState_=function(e){for(var t=0;t<e.length;t++)e[t].classList.remove(this.CssClasses_.IS_ACTIVE)},C.prototype.resetPanelState_=function(e){for(var t=0;t<e.length;t++)e[t].classList.remove(this.CssClasses_.IS_ACTIVE)},C.prototype.toggleDrawer=function(){var e=this.element_.querySelector("."+this.CssClasses_.DRAWER_BTN);this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN),this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN),this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)?(this.drawer_.setAttribute("aria-hidden","false"),e.setAttribute("aria-expanded","true")):(this.drawer_.setAttribute("aria-hidden","true"),e.setAttribute("aria-expanded","false"))},C.prototype.toggleDrawer=C.prototype.toggleDrawer,C.prototype.init=function(){if(this.element_){var e=document.createElement("div");e.classList.add(this.CssClasses_.CONTAINER);var n=this.element_.querySelector(":focus");this.element_.parentElement.insertBefore(e,this.element_),this.element_.parentElement.removeChild(this.element_),e.appendChild(this.element_),n&&n.focus();for(var s=this.element_.childNodes,i=s.length,r=0;r<i;r++){var o=s[r];o.classList&&o.classList.contains(this.CssClasses_.HEADER)&&(this.header_=o),o.classList&&o.classList.contains(this.CssClasses_.DRAWER)&&(this.drawer_=o),o.classList&&o.classList.contains(this.CssClasses_.CONTENT)&&(this.content_=o)}window.addEventListener("pageshow",function(e){e.persisted&&(this.element_.style.overflowY="hidden",requestAnimationFrame(function(){this.element_.style.overflowY=""}.bind(this)))}.bind(this),!1),this.header_&&(this.tabBar_=this.header_.querySelector("."+this.CssClasses_.TAB_BAR));var a=this.Mode_.STANDARD;if(this.header_&&(this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)?a=this.Mode_.SEAMED:this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)?(a=this.Mode_.WATERFALL,this.header_.addEventListener("transitionend",this.headerTransitionEndHandler_.bind(this)),this.header_.addEventListener("click",this.headerClickHandler_.bind(this))):this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)&&(a=this.Mode_.SCROLL,e.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER)),a===this.Mode_.STANDARD?(this.header_.classList.add(this.CssClasses_.CASTING_SHADOW),this.tabBar_&&this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW)):a===this.Mode_.SEAMED||a===this.Mode_.SCROLL?(this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW),this.tabBar_&&this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW)):a===this.Mode_.WATERFALL&&(this.content_.addEventListener("scroll",this.contentScrollHandler_.bind(this)),this.contentScrollHandler_())),this.drawer_){var l=this.element_.querySelector("."+this.CssClasses_.DRAWER_BTN);if(!l){(l=document.createElement("div")).setAttribute("aria-expanded","false"),l.setAttribute("role","button"),l.setAttribute("tabindex","0"),l.classList.add(this.CssClasses_.DRAWER_BTN);var c=document.createElement("i");c.classList.add(this.CssClasses_.ICON),c.innerHTML=this.Constant_.MENU_ICON,l.appendChild(c)}this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)?l.classList.add(this.CssClasses_.ON_LARGE_SCREEN):this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)&&l.classList.add(this.CssClasses_.ON_SMALL_SCREEN),l.addEventListener("click",this.drawerToggleHandler_.bind(this)),l.addEventListener("keydown",this.drawerToggleHandler_.bind(this)),this.element_.classList.add(this.CssClasses_.HAS_DRAWER),this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)?this.header_.insertBefore(l,this.header_.firstChild):this.element_.insertBefore(l,this.content_);var u=document.createElement("div");u.classList.add(this.CssClasses_.OBFUSCATOR),this.element_.appendChild(u),u.addEventListener("click",this.drawerToggleHandler_.bind(this)),this.obfuscator_=u,this.drawer_.addEventListener("keydown",this.keyboardEventHandler_.bind(this)),this.drawer_.setAttribute("aria-hidden","true")}if(this.screenSizeMediaQuery_=window.matchMedia(this.Constant_.MAX_WIDTH),this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this)),this.screenSizeHandler_(),this.header_&&this.tabBar_){this.element_.classList.add(this.CssClasses_.HAS_TABS);var d=document.createElement("div");d.classList.add(this.CssClasses_.TAB_CONTAINER),this.header_.insertBefore(d,this.tabBar_),this.header_.removeChild(this.tabBar_);var h=document.createElement("div");h.classList.add(this.CssClasses_.TAB_BAR_BUTTON),h.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);var p=document.createElement("i");p.classList.add(this.CssClasses_.ICON),p.textContent=this.Constant_.CHEVRON_LEFT,h.appendChild(p),h.addEventListener("click",function(){this.tabBar_.scrollLeft-=this.Constant_.TAB_SCROLL_PIXELS}.bind(this));var f=document.createElement("div");f.classList.add(this.CssClasses_.TAB_BAR_BUTTON),f.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);var _=document.createElement("i");_.classList.add(this.CssClasses_.ICON),_.textContent=this.Constant_.CHEVRON_RIGHT,f.appendChild(_),f.addEventListener("click",function(){this.tabBar_.scrollLeft+=this.Constant_.TAB_SCROLL_PIXELS}.bind(this)),d.appendChild(h),d.appendChild(this.tabBar_),d.appendChild(f);var m=function(){this.tabBar_.scrollLeft>0?h.classList.add(this.CssClasses_.IS_ACTIVE):h.classList.remove(this.CssClasses_.IS_ACTIVE),this.tabBar_.scrollLeft<this.tabBar_.scrollWidth-this.tabBar_.offsetWidth?f.classList.add(this.CssClasses_.IS_ACTIVE):f.classList.remove(this.CssClasses_.IS_ACTIVE)}.bind(this);this.tabBar_.addEventListener("scroll",m),m();var v=function(){this.resizeTimeoutId_&&clearTimeout(this.resizeTimeoutId_),this.resizeTimeoutId_=setTimeout(function(){m(),this.resizeTimeoutId_=null}.bind(this),this.Constant_.RESIZE_TIMEOUT)}.bind(this);window.addEventListener("resize",v),this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)&&this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);for(var E=this.tabBar_.querySelectorAll("."+this.CssClasses_.TAB),y=this.content_.querySelectorAll("."+this.CssClasses_.PANEL),C=0;C<E.length;C++)new t(E[C],E,y,this)}this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},window.MaterialLayoutTab=t,n.register({constructor:C,classAsString:"MaterialLayout",cssClass:"mdl-js-layout"});var g=function(e){this.element_=e,this.init()};window.MaterialDataTable=g,g.prototype.Constant_={},g.prototype.CssClasses_={DATA_TABLE:"mdl-data-table",SELECTABLE:"mdl-data-table--selectable",SELECT_ELEMENT:"mdl-data-table__select",IS_SELECTED:"is-selected",IS_UPGRADED:"is-upgraded"},g.prototype.selectRow_=function(e,t,n){return t?function(){e.checked?t.classList.add(this.CssClasses_.IS_SELECTED):t.classList.remove(this.CssClasses_.IS_SELECTED)}.bind(this):n?function(){var t;if(e.checked)for(t=0;t<n.length;t++)n[t].querySelector("td").querySelector(".mdl-checkbox").MaterialCheckbox.check(),n[t].classList.add(this.CssClasses_.IS_SELECTED);else for(t=0;t<n.length;t++)n[t].querySelector("td").querySelector(".mdl-checkbox").MaterialCheckbox.uncheck(),n[t].classList.remove(this.CssClasses_.IS_SELECTED)}.bind(this):void 0},g.prototype.createCheckbox_=function(e,t){var s=document.createElement("label"),i=["mdl-checkbox","mdl-js-checkbox","mdl-js-ripple-effect",this.CssClasses_.SELECT_ELEMENT];s.className=i.join(" ");var r=document.createElement("input");return r.type="checkbox",r.classList.add("mdl-checkbox__input"),e?(r.checked=e.classList.contains(this.CssClasses_.IS_SELECTED),r.addEventListener("change",this.selectRow_(r,e))):t&&r.addEventListener("change",this.selectRow_(r,null,t)),s.appendChild(r),n.upgradeElement(s,"MaterialCheckbox"),s},g.prototype.init=function(){if(this.element_){var e=this.element_.querySelector("th"),t=Array.prototype.slice.call(this.element_.querySelectorAll("tbody tr")),n=Array.prototype.slice.call(this.element_.querySelectorAll("tfoot tr")),s=t.concat(n);if(this.element_.classList.contains(this.CssClasses_.SELECTABLE)){var i=document.createElement("th"),r=this.createCheckbox_(null,s);i.appendChild(r),e.parentElement.insertBefore(i,e);for(var o=0;o<s.length;o++){var a=s[o].querySelector("td");if(a){var l=document.createElement("td");if("TBODY"===s[o].parentNode.nodeName.toUpperCase()){var c=this.createCheckbox_(s[o]);l.appendChild(c)}s[o].insertBefore(l,a)}}this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}}},n.register({constructor:g,classAsString:"MaterialDataTable",cssClass:"mdl-js-data-table"});var b=function(e){this.element_=e,this.init()};window.MaterialRipple=b,b.prototype.Constant_={INITIAL_SCALE:"scale(0.0001, 0.0001)",INITIAL_SIZE:"1px",INITIAL_OPACITY:"0.4",FINAL_OPACITY:"0",FINAL_SCALE:""},b.prototype.CssClasses_={RIPPLE_CENTER:"mdl-ripple--center",RIPPLE_EFFECT_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE:"mdl-ripple",IS_ANIMATING:"is-animating",IS_VISIBLE:"is-visible"},b.prototype.downHandler_=function(e){if(!this.rippleElement_.style.width&&!this.rippleElement_.style.height){var t=this.element_.getBoundingClientRect();this.boundHeight=t.height,this.boundWidth=t.width,this.rippleSize_=2*Math.sqrt(t.width*t.width+t.height*t.height)+2,this.rippleElement_.style.width=this.rippleSize_+"px",this.rippleElement_.style.height=this.rippleSize_+"px"}if(this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE),"mousedown"===e.type&&this.ignoringMouseDown_)this.ignoringMouseDown_=!1;else{if("touchstart"===e.type&&(this.ignoringMouseDown_=!0),this.getFrameCount()>0)return;this.setFrameCount(1);var n,s,i=e.currentTarget.getBoundingClientRect();if(0===e.clientX&&0===e.clientY)n=Math.round(i.width/2),s=Math.round(i.height/2);else{var r=void 0!==e.clientX?e.clientX:e.touches[0].clientX,o=void 0!==e.clientY?e.clientY:e.touches[0].clientY;n=Math.round(r-i.left),s=Math.round(o-i.top)}this.setRippleXY(n,s),this.setRippleStyles(!0),window.requestAnimationFrame(this.animFrameHandler.bind(this))}},b.prototype.upHandler_=function(e){e&&2!==e.detail&&window.setTimeout(function(){this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE)}.bind(this),0)},b.prototype.init=function(){if(this.element_){var e=this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)||(this.rippleElement_=this.element_.querySelector("."+this.CssClasses_.RIPPLE),this.frameCount_=0,this.rippleSize_=0,this.x_=0,this.y_=0,this.ignoringMouseDown_=!1,this.boundDownHandler=this.downHandler_.bind(this),this.element_.addEventListener("mousedown",this.boundDownHandler),this.element_.addEventListener("touchstart",this.boundDownHandler),this.boundUpHandler=this.upHandler_.bind(this),this.element_.addEventListener("mouseup",this.boundUpHandler),this.element_.addEventListener("mouseleave",this.boundUpHandler),this.element_.addEventListener("touchend",this.boundUpHandler),this.element_.addEventListener("blur",this.boundUpHandler),this.getFrameCount=function(){return this.frameCount_},this.setFrameCount=function(e){this.frameCount_=e},this.getRippleElement=function(){return this.rippleElement_},this.setRippleXY=function(e,t){this.x_=e,this.y_=t},this.setRippleStyles=function(t){if(null!==this.rippleElement_){var n,s,i="translate("+this.x_+"px, "+this.y_+"px)";t?(s=this.Constant_.INITIAL_SCALE,this.Constant_.INITIAL_SIZE):(s=this.Constant_.FINAL_SCALE,this.rippleSize_+"px",e&&(i="translate("+this.boundWidth/2+"px, "+this.boundHeight/2+"px)")),n="translate(-50%, -50%) "+i+s,this.rippleElement_.style.webkitTransform=n,this.rippleElement_.style.msTransform=n,this.rippleElement_.style.transform=n,t?this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING):this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING)}},this.animFrameHandler=function(){this.frameCount_-- >0?window.requestAnimationFrame(this.animFrameHandler.bind(this)):this.setRippleStyles(!1)})}},n.register({constructor:b,classAsString:"MaterialRipple",cssClass:"mdl-js-ripple-effect",widget:!1})}()},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"#clear-action {\n  border-radius: 50%;\n  width: 70px;\n  height: 70px;\n  position: fixed;\n  top: 80px;\n  right: 5px;\n  background: red;\n  color: white;\n  cursor: pointer;\n  z-index: 100;\n}\n\n#clear-action.disabled {\n  opacity: 0.5;\n  cursor: default;\n}\n\n.action-icon {\n  position: absolute;\n  text-align: center;\n  font-size: 25px;\n  height: 20px;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  left: 0;\n  right: 0;\n}\n\n",""])},function(e,t,n){var s=n(16);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"#notifier {\n  z-index: 300;\n}\n",""])},function(e,t,n){var s=n(18);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"#image-list {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.sortable-ghost {\n  opacity: 0.5;\n  border: 1px solid #444;\n  filter: blur(2px);\n}\n",""])},function(e,t,n){var s=n(20);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"#loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 200;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  cursor: default;\n  animation: rotation 2s infinite linear;\n  opacity: 0;\n  pointer-events: none;\n}\n\n#loading .material-icons {\n  font-size: 50vw;\n  color: #444;\n  opacity: 0.5;\n}\n\n@keyframes rotation {\n  from {\n    -webkit-transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(359deg);\n  }\n}\n",""])},function(e,t,n){var s=n(22);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,".image {\n  position: relative;\n  padding: 10px;\n  background: #333;\n  margin: 1px;\n  cursor: move;\n}\n\n.image-name {\n  height: 25px;\n}\n\n.image-description {\n  display: none;\n  color: #777;\n}\n\n.image-element {\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: 50% 50%;\n  width: 250px;\n  height: 250px;\n}\n\n.image-buttons {\n  position: absolute;\n  bottom: 15px;\n  left: 15px;\n}\n\n.remove {\n  background-color: red;\n}\n\n.ellipsis {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n",""])},function(e,t,n){var s=n(24);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){"use strict";n.r(t);n(25);t.default=(({id:e,name:t,description:n,src:s})=>`\n  <div id="image-${e}" class="image pending" data-id="${e}">\n    <div class="image-name ellipsis">${t}</div>\n    <div class="image-description">${n}</div>\n    <div class="image-element" data-style="background-image: url('${s}')"></div>\n\n    <div class="image-buttons">\n      <button data-id="${e}" class="remove mdl-button mdl-button--fab mdl-button--mini-fab">\n        <i class="material-icons mdl-color-text--white">delete</i>\n      </button>\n\n      <button data-id="${e}" class="edit mdl-button mdl-button--fab mdl-button--mini-fab">\n        <i class="material-icons mdl-color-text--white">mode_edit</i>\n      </button>\n    </div>\n  </div>\n`)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,s=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:s+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"#count {\n  border-radius: 50%;\n  width: 70px;\n  height: 70px;\n  position: fixed;\n  top: 5px;\n  right: 5px;\n  background: #1DA9F0;\n  color: white;\n  cursor: default;\n  z-index: 100;\n}\n\n.count-number {\n  position: absolute;\n  text-align: center;\n  font-size: 25px;\n  height: 20px;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  left: 0;\n  right: 0;\n}\n",""])},function(e,t,n){var s=n(28);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){"use strict";(function(e){function n(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});var s="undefined"!=typeof window?window:e,i=/^webkit/i;RegExp.prototype.toJSON=RegExp.prototype.toString,RegExp.fromJSON=function(e){var t=e.lastIndexOf("/");return new RegExp(e.slice(1,t),e.slice(t+1))};var r=t.fixedTypes={Map:{toJSON:function(e){return[].concat(n(e))},fromJSON:function(e){return new Map(e)}},Set:{toJSON:function(e){return[].concat(n(e))},fromJSON:function(e){return new Set(e)}}},o=t.ignoredTypes={Array:!0,Boolean:!0,Null:!0,Number:!0,Object:!0,String:!0},a=t.getType=function(e,t){var n=null;return e&&"function"==typeof e.toJSON&&(n=Object.prototype.toString.call(e).slice(8,-1),o[n]&&(n=null)),n},l=!1,c=t.patch=function(e,t){var n=r[e],s="function"==typeof t&&t.prototype&&t.prototype.toJSON;n&&n.toJSON?t.prototype.toJSON=function(){return l?{__type__:e,__value__:n.toJSON(this)}:"function"==typeof s?s.apply(this,arguments):this}:"function"==typeof s&&(t.prototype.toJSON=function(){var e=l&&a(this),t=s.apply(this,arguments);return e?{__type__:e,__value__:t}:t})},u=t.patchAll=function(){var e=arguments.length<=0||void 0===arguments[0]?s:arguments[0],t=arguments.length<=1||void 0===arguments[1]?i:arguments[1],n=!0,r=!1,o=void 0;try{for(var a,l=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var u=a.value;t.test(u)||c(u,e[u])}}catch(e){r=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(r)throw o}}},d=t.reviver=function(e,t){var n=t&&t.__value__&&t.__type__,i=n&&(r[n]||s[n]);return i&&i.fromJSON?i.fromJSON(t.__value__):"function"==typeof i?new i(t.__value__):t};t.stringify=function(e,t){var n=void 0;l=!0;try{n=JSON.stringify(e,null,t),l=!1}catch(e){throw l=!1,new Error(e)}return n},t.parse=function(e){return JSON.parse(e,d)};u(),"undefined"!=typeof Map&&Map!==s.Map&&(c("Map",Map),c("Set",Set))}).call(this,n(3))},function(e,t,n){var s;(function(){function i(e,t,n,s){return e<20?t&n|~t&s:e<40?t^n^s:e<60?t&n|t&s|n&s:t^n^s}function r(e){return e<20?1518500249:e<40?1859775393:e<60?2400959708:3395469782}function o(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function a(e,t){return e<<t|e>>>32-t}function l(e){return function(e){var t,n="";for(t=0;t<4*e.length;t++)n+="0123456789abcdef".charAt(e[t>>2]>>8*(3-t%4)+4&15)+"0123456789abcdef".charAt(e[t>>2]>>8*(3-t%4)&15);return n}(function(e){var t,n,s,l,c,u,d,h,p=[],f=1732584193,_=4023233417,m=2562383102,v=271733878,E=3285377520;for(d=0;d<e.length;d+=16){for(t=f,n=_,s=m,l=v,c=E,h=0;h<80;h++)p[h]=h<16?e[d+h]:a(p[h-3]^p[h-8]^p[h-14]^p[h-16],1),u=o(o(a(f,5),i(h,_,m,v)),o(o(E,p[h]),r(h))),E=v,v=m,m=a(_,30),_=f,f=u;f=o(f,t),_=o(_,n),m=o(m,s),v=o(v,l),E=o(E,c)}return[f,_,m,v,E]}(function(e){var t,n=1+(e.length+8>>6),s=[];for(t=0;t<16*n;t++)s[t]=0;for(t=0;t<e.length;t++)s[t>>2]|=e.charCodeAt(t)<<24-8*(3&t);return s[t>>2]|=128<<24-8*(3&t),s[16*n-1]=8*e.length,s}(e)))}void 0===(s=function(){return l}.call(t,n,t,e))||(e.exports=s)}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(5));var o=r.REPLICATE_STATE,a=r.REPLICATED_STATE,l=r.STATE_CHANGE_ERROR,c={};for(var u in r)c[r[u]]=!0;t.default=function(e,t,n,r,u){if(t.creatorStore&&c[u.type]&&t.creatorStore.dispatch(u),e&&e.key&&e.initializedReplication){var d=[].concat(t.replicator),h=!0,p=!1,f=void 0;try{for(var _,m=d[Symbol.iterator]();!(h=(_=m.next()).done);h=!0){var v=_.value;if(v.onStateChange)if(t.reducerKeys){var E=!0,y=!1,C=void 0;try{for(var g,b=t.reducerKeys[Symbol.iterator]();!(E=(g=b.next()).done);E=!0){var I=g.value;n[I]!==r[I]&&function(){var c={reducerKey:I,state:n[I],nextState:r[I],queryable:"object"===i(t.queryable)?t.queryable[I]:t.queryable,create:!!u.__create&&function(t){return setTimeout(function(){e.setState(t,!0),e.dispatch(s({type:a},c,{state:t}))})}};setTimeout(function(){e.dispatch(s({type:o},c))}),v.onStateChange(s({},c,{store:e,action:u,setState:function(t){return setTimeout(function(){e.setState(t,!0),e.dispatch(s({type:a},c,{state:t})),u.__callback&&u.__callback()})},setStatus:function(t){return setTimeout(function(){e.dispatch(s({type:a},c,{status:t})),u.__callback&&u.__callback()})},setError:function(t){return setTimeout(function(){e.dispatch(s({type:l},c,{error:t})),u.__callback&&u.__callback()})}}))}()}}catch(e){y=!0,C=e}finally{try{!E&&b.return&&b.return()}finally{if(y)throw C}}}else n!==r&&function(){var i={state:n,nextState:r,queryable:t.queryable,create:!!u.__create&&function(t){return setTimeout(function(){e.setState(t,!0),e.dispatch(s({type:a},i,{state:t}))})}};setTimeout(function(){e.dispatch(s({type:o},i))}),v.onStateChange(s({},i,{store:e,action:u,setState:function(t){return setTimeout(function(){e.setState(t,!0),e.dispatch(s({type:a},i,{state:t})),u.__callback&&u.__callback()})},setStatus:function(t){return setTimeout(function(){e.dispatch(s({type:a},i,{status:t})),u.__callback&&u.__callback()})},setError:function(t){return setTimeout(function(){e.dispatch(s({type:l},i,{error:t})),u.__callback&&u.__callback()})}}))}();v.postReduction&&v.postReduction({store:e,state:n,nextState:r,action:u})}}catch(e){p=!0,f=e}finally{try{!h&&m.return&&m.return()}finally{if(p)throw f}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.clientState,s=e.reducerKeys,i=s,r=null;!0===s&&(s=Object.keys(t),i=s);if(n)if(i=[],r=[],Array.isArray(s)){var o=!0,a=!1,l=void 0;try{for(var c,u=s[Symbol.iterator]();!(o=(c=u.next()).done);o=!0){var d=c.value;void 0===n[d]?i.push(d):r.push(d)}}catch(e){a=!0,l=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw l}}}else{for(var h in s)s[h]&&void 0===n[h]?i.push(h):r.push(h);s=Object.keys(s)}return e.reducerKeys=s,{getReducerKeys:i,setReducerKeys:r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=l(n(33)),o=l(n(7)),a=n(5);function l(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){var n=[].concat(t.replicator),l=n.filter(function(t){return t.onReady&&e.onReady(t.onReady),"function"==typeof t.getInitialState});e.initializingReplication=(e.initializingReplication||0)+1,e.initializedReplication=!1;var c=1,u=!1,d=t.reducerKeys?{}:null,h=function(){if(0==--c&&(u&&e.setState(d,!0),0==--e.initializingReplication)){for(;e.readyCallbacks.length;)e.readyCallbacks.shift()({store:e});e.initializedReplication=!0,delete t.create,delete t.clientState,delete t.creatorStore,e.dispatch({type:a.FULLY_INITIALIZED})}};if(e.key){var p=e.key,f=e.getState(),_=function(e){return t.create||t.clientState&&(!e||void 0!==t.clientState[e])},m=function(n){var r=n.getInitialState,l=n.onStateChange;return function(n){var m=n?t.clientState&&t.clientState[n]:t.clientState,v={reducerKey:n,nextState:n?f[n]:f,queryable:"object"===i(t.queryable)?t.queryable[n]:t.queryable,create:t.create,clientState:m};e.dispatch(s({type:a.GET_INITIAL_STATE},v)),c++,r({store:e,reducerKey:n,clientState:m,setState:function(t){if(void 0===t){if(l&&_(n)){var i=s({type:a.REPLICATE_INITIAL_STATE},v);e.dispatch(i),c++,l(s({},v,{store:e,action:i,setState:function(t){e.setState(t,!0),e.dispatch(s({type:a.REPLICATED_INITIAL_STATE},v,{state:t})),h()},setStatus:function(t){e.dispatch(s({type:a.REPLICATED_INITIAL_STATE},v,{status:t})),h()},setError:function(t){e.dispatch(s({type:a.STATE_CHANGE_ERROR},v,{error:t})),h()}}))}}else(0,o.default)(p,e.key)&&(n?d[n]=t:d=t,u=!0);e.dispatch(s({type:a.GOT_INITIAL_STATE},v,{state:t})),h()},setError:function(t){e.dispatch(s({type:a.INITIAL_STATE_ERROR},v,{error:t})),h()}})}};if(t.reducerKeys){var v=(0,r.default)(t,f),E=v.getReducerKeys,y=v.setReducerKeys;if(y){var C=!0,g=!1,b=void 0;try{for(var I,T=n[Symbol.iterator]();!(C=(I=T.next()).done);C=!0){var S=I.value;if(S.onStateChange){var L=!0,A=!1,w=void 0;try{for(var R,N=y[Symbol.iterator]();!(L=(R=N.next()).done);L=!0){var D=R.value;_(D)&&function(){var n={reducerKey:D,nextState:D?f[D]:f,queryable:"object"===i(t.queryable)?t.queryable[D]:t.queryable,create:t.create,clientState:D?t.clientState&&t.clientState[D]:t.clientState},r=s({type:a.REPLICATE_INITIAL_STATE},n);e.dispatch(r),c++,S.onStateChange(s({},n,{store:e,action:r,setState:function(t){e.setState(t,!0),e.dispatch(s({type:a.REPLICATED_INITIAL_STATE},n,{state:t})),h()},setStatus:function(t){e.dispatch(s({type:a.REPLICATED_INITIAL_STATE},n,{status:t})),h()},setError:function(t){e.dispatch(s({type:a.STATE_CHANGE_ERROR},n,{error:t})),h()}}))}()}}catch(e){A=!0,w=e}finally{try{!L&&N.return&&N.return()}finally{if(A)throw w}}}}}catch(e){g=!0,b=e}finally{try{!C&&T.return&&T.return()}finally{if(g)throw b}}}var O=!0,P=!1,x=void 0;try{for(var k,M=l[Symbol.iterator]();!(O=(k=M.next()).done);O=!0){var B=m(k.value),F=!0,H=!1,U=void 0;try{for(var j,G=E[Symbol.iterator]();!(F=(j=G.next()).done);F=!0)B(j.value)}catch(e){H=!0,U=e}finally{try{!F&&G.return&&G.return()}finally{if(H)throw U}}}}catch(e){P=!0,x=e}finally{try{!O&&M.return&&M.return()}finally{if(P)throw x}}}else{var q=!0,W=!1,V=void 0;try{for(var $,K=l[Symbol.iterator]();!(q=($=K.next()).done);q=!0)m($.value)()}catch(e){W=!0,V=e}finally{try{!q&&K.return&&K.return()}finally{if(W)throw V}}}h()}else h()}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var n,s,i=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{s="function"==typeof clearTimeout?clearTimeout:o}catch(e){s=o}}();var l,c=[],u=!1,d=-1;function h(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&p())}function p(){if(!u){var e=a(h);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===o||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function _(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||u||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){(function(t){e.exports=function(e,n){var s,i,r,o=!0;function a(e){function i(){n&&n(e,s),n=null}o?t.nextTick(i):i()}function l(e,t,n){s[e]=n,(0==--i||t)&&a(t)}Array.isArray(e)?(s=[],i=e.length):(r=Object.keys(e),s={},i=r.length),i?r?r.forEach(function(t){e[t](function(e,n){l(t,e,n)})}):e.forEach(function(e,t){e(function(e,n){l(t,e,n)})}):a(null),o=!1}}).call(this,n(36))},function(e,t){e.exports=function(e,t){return(t="number"==typeof t?t:1/0)?function e(n,s){return n.reduce(function(n,i){return Array.isArray(i)&&s<t?n.concat(e(i,s+1)):n.concat(i)},[])}(e,1):Array.isArray(e)?e.map(function(e){return e}):e}},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(3))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,